/*
 *  QccPack.rules
 */

/*
 *  Use a slash before lines staring with a macro
 *  Use at-at-slash before lines starting with normal make rules
 */

/***********************************************************************/
/*
 *  File installation/deinstallation
 */
/***********************************************************************/
#define QccCreatePath(path) @@\
	-@if (test ! -d path) ; \@@\
		then $(INSTALL_PATH) path ; \@@\
	fi

#define QccInstallFiles(path,files) \
QccCreatePath(path) @@\
	-@for i in files ; \@@\
	do \@@\
	(if (test -r $$i) ; \@@\
	then $(INSTALL) $$i path ; \@@\
	fi) \@@\
	done

#define QccUninstallFiles(path,files) @@\
uninstall:: @@\
	-@for i in files ; \@@\
	do \@@\
	$(RM) path/$$i ; \@@\
	done

/***********************************************************************/
/*
 *  Library compilation
 */
/***********************************************************************/
#define QccLib() @@\
CLEAN_FILES = *~ *.bak core $(OBJS) $(LIB) @@\
COMPRESS_FILES = *.c *.h *.html *.$(MAN_SUFFIX) @@\
Makefiles:: \
QccMakeLibHeader() \
QccMakeLib($(QCCPACK_LIB_PATH)) \
QccInstallLibHeader() \
QccInstallMan() \
QccMakeHTMLMan() \
QccInstallHTMLMan()

#define QccMakeLibHeader() @@\
make.libheader: \
QccInstallFiles($(QCCPACK_INCLUDE_PATH),$(HEADER)) \
QccUninstallFiles($(QCCPACK_INCLUDE_PATH),$(HEADER))

#define QccInstallLibHeader() @@\
install.libheader: \
QccInstallFiles($(QCCPACK_INSTALL_INCLUDE_PATH),$(HEADER)) \
QccUninstallFiles($(QCCPACK_INSTALL_INCLUDE_PATH),$(HEADER))

#define QccMakeLib(path) @@\
QccCreateLibObjs(path,$(OBJS)) 

#define QccCreateLibObjs(path,objs) @@\
make.lib: objs @@\
	@echo "Installing object files for library creation..." \
QccCreatePath(path) \
QccInstallFiles(path,objs)


/***********************************************************************/
/*
 *  Build Static Library
 */
/***********************************************************************/
#ifdef QCCVERBOSEMAKE
#define QccStaticLib() @@\
make.lib:: @@\
	@echo "Making static library" @@\
	cd $(QCCPACK_LIB_PATH) ; \@@\
	$(ARCHIVE) $(QCCPACK_STATIC_LIB) *.o ; \@@\
	$(RANLIB) $(QCCPACK_STATIC_LIB) @@\
install.lib:: @@\
	@echo "Installing static library" \
QccInstallFiles($(QCCPACK_INSTALL_LIB_PATH), \
$(QCCPACK_LIB_PATH)/$(QCCPACK_STATIC_LIB)) @@\
uninstall:: @@\
	@echo "Uninstalling static library" @@\
	@$(RM) $(QCCPACK_INSTALL_LIB_PATH)/$(QCCPACK_STATIC_LIB) @@\
	@cd $(QCCPACK_LIB_PATH) ; \@@\
	$(RM) $(QCCPACK_STATIC_LIB) *.o
#else
#define QccStaticLib() @@\
make.lib:: @@\
	@echo "Making static library" @@\
	@cd $(QCCPACK_LIB_PATH) ; \@@\
	$(ARCHIVE) $(QCCPACK_STATIC_LIB) *.o ; \@@\
	$(RANLIB) $(QCCPACK_STATIC_LIB) @@\
install.lib:: @@\
	@echo "Installing static library" \
QccInstallFiles($(QCCPACK_INSTALL_LIB_PATH), \
$(QCCPACK_LIB_PATH)/$(QCCPACK_STATIC_LIB)) @@\
uninstall:: @@\
	@echo "Uninstalling static library" @@\
	@$(RM) $(QCCPACK_INSTALL_LIB_PATH)/$(QCCPACK_STATIC_LIB) @@\
	@cd $(QCCPACK_LIB_PATH) ; \@@\
	$(RM) $(QCCPACK_STATIC_LIB) *.o
#endif

/***********************************************************************/
/*
 *  Build Dynamic Library
 */
/***********************************************************************/
#ifdef QCCVERBOSEMAKE
#define QccDynamicLib() @@\
make.lib:: @@\
	@echo "Making dynamic library" @@\
	-cd $(QCCPACK_LIB_PATH) ; \@@\
	$(LD) $(SHARED_OBJ_FLAGS) -o $(QCCPACK_DYNAMIC_LIB) *.o @@\
install.lib:: \
QccCreatePath($(QCCPACK_INSTALL_LIB_PATH)) @@\
	@echo "Installing dynamic library" @@\
	-cd $(QCCPACK_INSTALL_LIB_PATH) ; \@@\
	$(INSTALL) $(QCCPACK_LIB_PATH)/$(QCCPACK_DYNAMIC_LIB) \@@\
	      $(QCCPACK_DYNAMIC_LIB) @@\
uninstall:: @@\
	@echo "Uninstalling dynamic library" @@\
	@$(RM) $(QCCPACK_LIB_PATH)/$(QCCPACK_DYNAMIC_LIB) @@\
	@cd $(QCCPACK_INSTALL_LIB_PATH) ; \@@\
	$(RM) $(QCCPACK_DYNAMIC_LIB)
#else
#define QccDynamicLib() @@\
make.lib:: @@\
	@echo "Making dynamic library" @@\
	-@cd $(QCCPACK_LIB_PATH) ; \@@\
	$(LD) $(SHARED_OBJ_FLAGS) -o $(QCCPACK_DYNAMIC_LIB) *.o @@\
install.lib:: \
QccCreatePath($(QCCPACK_INSTALL_LIB_PATH)) @@\
	@echo "Installing dynamic library" @@\
	-@cd $(QCCPACK_INSTALL_LIB_PATH) ; \@@\
	$(INSTALL) $(QCCPACK_LIB_PATH)/$(QCCPACK_DYNAMIC_LIB) \@@\
	      $(QCCPACK_DYNAMIC_LIB) @@\
uninstall:: @@\
	@echo "Uninstalling dynamic library" @@\
	@$(RM) $(QCCPACK_LIB_PATH)/$(QCCPACK_DYNAMIC_LIB) @@\
	@cd $(QCCPACK_INSTALL_LIB_PATH) ; \@@\
	$(RM) $(QCCPACK_DYNAMIC_LIB)
#endif


/***********************************************************************/
/*
 *  Utilities compilation
 */
/***********************************************************************/
#define QccUtils() @@\
CLEAN_FILES = *~ *.bak core *.o $(EXECUTABLES) @@\
COMPRESS_FILES = *.c *.h *.html *.$(MAN_SUFFIX) @@\
Makefiles:: \
QccMakeUtils() \
QccInstallUtils() @@\
MAN_PAGES = $(EXECUTABLES) $(SHELL_SCRIPTS) \
QccInstallMan() \
QccMakeHTMLMan() \
QccInstallHTMLMan()

#define QccMakeUtils() @@\
make.utils: $(EXECUTABLES)

#define QccInstallUtils() @@\
install.utils: \
QccInstallFiles($(QCCPACK_INSTALL_BIN_PATH),\
$(EXECUTABLES) $(SHELL_SCRIPTS)) \
QccUninstallFiles($(QCCPACK_INSTALL_BIN_PATH),\
$(EXECUTABLES) $(SHELL_SCRIPTS))


/***********************************************************************/
/*
 *  Man page installation
 */
/***********************************************************************/
#define QccInstallMan() @@\
MAN_INSTALL_PATH = $(QCCPACK_INSTALL_MAN_PATH)/man$(MAN_SUFFIX) @@\
install.man:: \
QccCreatePath($(MAN_INSTALL_PATH)) @@\
	-@for i in $(MAN_PAGES) ; \@@\
	do \@@\
	(if (test -r man$(MAN_SUFFIX)/$$i.$(MAN_SUFFIX)) ; \@@\
	then $(INSTALL) man$(MAN_SUFFIX)/$$i.$(MAN_SUFFIX) \@@\
		$(MAN_INSTALL_PATH) ; \@@\
	fi) \@@\
	done @@\
uninstall:: @@\
	-@for i in $(MAN_PAGES) ; \@@\
	do \@@\
	$(RM) $(MAN_INSTALL_PATH)/$$i.$(MAN_SUFFIX) ; \@@\
	done @@\
clean:: @@\
	-@if (test -d man$(MAN_SUFFIX)) ; \@@\
		then (cd man$(MAN_SUFFIX); $(CLEAN) $(CLEAN_FILES)); \@@\
	fi

#define QccMakeHTMLMan() @@\
make.html-man:: \
QccCreatePath(html-man) @@\
	-@for i in $(MAN_PAGES) ; \@@\
	do \@@\
	(if (test -r man$(MAN_SUFFIX)/$$i.$(MAN_SUFFIX)) ; \@@\
	then $(RMAN) -l $$i.$(MAN_SUFFIX) \@@\
		man$(MAN_SUFFIX)/$$i.$(MAN_SUFFIX) | \@@\
		$(SED) -f $(QCCPACK_SOURCEFORGE_LOGO) > \@@\
		html-man/$$i.$(MAN_SUFFIX).html ; \@@\
	fi) \@@\
	done

#define QccInstallHTMLMan() @@\
install.html-man:: \
QccCreatePath($(QCCPACK_INSTALL_HTML-MAN_PATH)) @@\
	-@for i in $(MAN_PAGES) ; \@@\
	do \@@\
	(if (test -r html-man/$$i.$(MAN_SUFFIX).html) ; \@@\
	then $(INSTALL) html-man/$$i.$(MAN_SUFFIX).html \@@\
	     $(QCCPACK_INSTALL_HTML-MAN_PATH) ; \@@\
	fi) \@@\
	done @@\
uninstall:: @@\
	-@for i in $(MAN_PAGES) ; \@@\
	do \@@\
	$(RM) $(QCCPACK_INSTALL_HTML-MAN_PATH)/$$i.$(MAN_SUFFIX).html ; \@@\
	done @@\


/***********************************************************************/
/*
 *  Data Installation
 *
/***********************************************************************/
#define QccInstallData() @@\
install.data:: \
QccCreatePath($(QCCPACK_INSTALL_DATA_PATH)) @@\
	-@echo "Installing data directories..." @@\
	-@for i in $(QCCPACK_DATA_DIRS) ; \@@\
	do \@@\
	(if (test -r Data/$$i) ; \@@\
	then cp -r Data/$$i \@@\
		$(QCCPACK_INSTALL_DATA_PATH) ; \@@\
	fi) \@@\
	done @@\
uninstall:: @@\
	-@echo "Uninstalling data directories..." @@\
	-@for i in $(QCCPACK_DATA_DIRS) ; \@@\
	do \@@\
	$(RMDIR) $(QCCPACK_INSTALL_DATA_PATH)/$$i ; \@@\
	done @@\

/***********************************************************************/
/*
 *  Misc. Documentation Installation
 *
/***********************************************************************/
#define QccInstallDoc(docs) @@\
install.doc:: \
QccCreatePath($(QCCPACK_INSTALL_DOC_PATH)) @@\
	-@for i in docs ; \@@\
	do \@@\
	(if (test -r $$i) ; \@@\
	then $(INSTALL) $$i \@@\
		$(QCCPACK_INSTALL_DOC_PATH) ; \@@\
	fi) \@@\
	done @@\
uninstall:: @@\
	-@for i in docs ; \@@\
	do \@@\
	$(RM) $(QCCPACK_INSTALL_DOC_PATH)/`basename $$i` ; \@@\
	done @@\

/***********************************************************************/
/*
 *  Single Directory
 */
/***********************************************************************/
#define QccDir() \
QccClean() \
QccCompress() \
QccUncompress()

#define QccClean() @@\
clean:: @@\
	@$(CLEAN) $(CLEAN_FILES)

#define QccCompress() @@\
compress:: @@\
	@echo "Compressing files in $(CURRENT_DIR)" @@\
	-@for j in $(COMPRESS_FILES) ; \@@\
	do \@@\
	(if (test -f $$j) ; \@@\
	then $(COMPRESS) $$j ; \@@\
	fi) \@@\
	done

#define QccUncompress() @@\
uncompress:: @@\
	@echo "Uncompressing files in $(CURRENT_DIR)" @@\
	-@for j in $(UNCOMPRESS_FILES) ; \@@\
	do \@@\
	(if (test -f $$j) ; \@@\
	then $(UNCOMPRESS) $$j ; \@@\
	fi) \@@\
	done


/***********************************************************************/
/*
 *  Sub Directories
 */
/***********************************************************************/
#define QccSubdirs(subdirs) \
QccLibSubdirs(subdirs) \
QccUtilsSubdirs(subdirs) \
QccManSubdirs(subdirs) \
QccHTMLManSubdirs(subdirs) \
QccDocSubdirs(subdirs) \
QccCleanSubdirs(subdirs) \
QccCompressSubdirs(subdirs) \
QccUncompressSubdirs(subdirs) \
QccMakefileSubdirs(subdirs) \
QccUninstallSubdirs(subdirs)

#define QccLibSubdir(subdir) @@\
all:: make.libheader install.libheader make.lib install.lib \
QccLibSubdirs(subdir) \
QccManSubdirs(subdir) \
QccHTMLManSubdirs(subdir) \
QccCleanSubdirs(subdir) \
QccCompressSubdirs(subdir) \
QccUncompressSubdirs(subdir) \
QccMakefileSubdirs(subdir) \
QccUninstallSubdirs(subdir)

#define QccUtilsSubdir(subdir) \
all:: make.utils install.utils @@\
QccUtilsSubdirs(subdir) \
QccManSubdirs(subdir) \
QccHTMLManSubdirs(subdir) \
QccCleanSubdirs(subdir) \
QccCompressSubdirs(subdir) \
QccUncompressSubdirs(subdir) \
QccMakefileSubdirs(subdir) \
QccUninstallSubdirs(subdir)

#define QccManSubdirs(subdirs) \
NamedTargetSubdirs(install.man,subdirs,"Installing man pages",\
NullParameter,install.man)

#ifdef HTMLMAN
#define QccHTMLManSubdirs(subdirs) \
NamedTargetSubdirs(make.html-man,subdirs,"Making HTML man pages",\
NullParameter,make.html-man) \
NamedTargetSubdirs(install.html-man,subdirs,"Installing HTML man pages",\
NullParameter,install.html-man)
#else
#define QccHTMLManSubdirs(subdirs)
#endif

#define QccDocSubdirs(subdirs) \
NamedTargetSubdirs(install.doc,subdirs,"Installing documentation",\
NullParameter,install.doc)

#define QccLibSubdirs(subdirs) \
NamedTargetSubdirs(make.libheader,subdirs,"Making library header",\
NullParameter,make.libheader) \
NamedTargetSubdirs(install.libheader,subdirs,"Installing library header",\
NullParameter,install.libheader) \
NamedTargetSubdirs(make.lib,subdirs,"Making library objects",\
NullParameter,make.lib)

#define QccUtilsSubdirs(subdirs) \
NamedTargetSubdirs(make.utils,subdirs,"Making utilities",NullParameter,\
make.utils) \
NamedTargetSubdirs(install.utils,subdirs,"Installing utilities",NullParameter,\
install.utils)

#define QccMakefileSubdirs(subdirs) @@\
Makefiles:: @@\
	-@for i in subdirs ; \@@\
	do \@@\
	(if (test -d $$i) ; \@@\
	then cd $$i ; \@@\
	$(IMAKE_CMD) ; \@@\
	fi) \@@\
	done \
NamedTargetSubdirs(Makefiles,subdirs,"Making Makefiles",NullParameter,\
Makefiles)

#define QccUninstallSubdirs(subdirs) \
NamedTargetSubdirs(uninstall,subdirs,"Uninstalling",\
NullParameter,uninstall)

#define QccCleanSubdirs(subdirs) \
NamedTargetSubdirs(clean,subdirs,"Cleaning",\
NullParameter,clean)

#define QccCompressSubdirs(subdirs) \
NamedTargetSubdirs(compress,subdirs,"Compressing",\
NullParameter,compress)

#define QccUncompressSubdirs(subdirs) \
NamedTargetSubdirs(uncompress,subdirs,"Uncompressing",\
NullParameter,uncompress)


/***********************************************************************/
/*
 *
 *  The following is incorporated from XFree86
 *    /usr/X11/lib/X11/config/Imake.rules
 *
 */
/***********************************************************************/

#ifndef NamedTargetSubdirs
#define NamedTargetSubdirs(name,dirs,verb,flags,subname)		@@\
name::									@@\
	@for i in dirs ;\						@@\
	do \								@@\
		echo verb "in $(CURRENT_DIR)/$$i..."; \			@@\
		MakeNamedTargetSubdir($$i,flags,subname); \		@@\
	done
#endif

/*
 * MakeNamedTargetSubdir - do make in a subdir.
 */
#ifndef MakeNamedTargetSubdir
#define MakeNamedTargetSubdir(dir,flags,subname)\
		(cd dir && $(MAKE) \	@@\
			flags subname)
#endif

#define NullParameter

