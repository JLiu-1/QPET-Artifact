.TH ECVQTRAIN 1 "QCCPACK" ""
.SH NAME
ecvqtrain \- train codebooks for entropy-constrained
vector quantization (ECVQ)
.SH SYNOPSIS
.B ecvqtrain
.RB "[\|" \-i
.IR  initialcodebookfile "\|]"
.RB "[\|" \-s
.IR initialcodebooksize "\|]"
.RB "[\|" \-I 
.IR iterations "\|]"
.RB "[\|" \-t
.IR threshold "\|]"
.I lambda
.I trainingfile
.I codebookfile
.SH DESCRIPTION
.LP
.B ecvqtrain
trains codebooks for use in 
entropy-constrained vector quantization (ECVQ) (see
.BR ecvqencode (1)).
.I trainingfile
is an input data file in DAT
format which contains training vectors.  
.I codebookfile
is the output file in CBK
format which contains the codewords which form the    
codebook.  Initial codewords are chosen at       
random, unless 
.I initialcodebookfile
is specified.  
.LP
.I lambda
(a floating point value)
is the Lagrangian-multiplier "rate-distortion" parameter that controls
the trade-off between rate and distortion in a cost function
used in the iterative descent algorithm.  This cost function takes the
form of
.I "J(i) = D(i) + lambda * R(i)"
where 
.I D(i)
is the average distortion and
.I R(i)
is the average rate (estimated from codeword probabilities)
for iteration
.IR i .
See the paper by Chou, Lookabaugh, and Gray cited below for more
details on the training algorithm.
.LP
Because the ECVQ training usually reduces the codebook
size during training, the output codebook,
.IR codebookfile,
may contain fewer codewords than the
the initial codebook (as specified by 
.I initialcodebookfile
or by the
.B \-s
option).
.SH OPTIONS
.TP
.BI \-i " initialcodebookfile"
String. Initial codebook.
Note: one (and only one) of 
.B \-i 
and 
.B \-s
must be given.  
.TP
.BI \-s " codebooksize"
Integer. Number of codewords to create for random initial codebook.
Note: one (and only one) of 
.B \-i 
and 
.B \-s
must be given.  
.TP
.BI \-I " iterations"
Integer. Traininging stops after
.I iterations 
iterations
of the ECVQ training algorithm through the training data.
Note: one (and only one) of 
.B \-t
and 
.B \-I
must be given.  
.TP 
.BI \-t " threshold"
Float. Stop the training process when the Lagrangian cost function, 
.IR J,
changes by less
than 
.I threshold
from one iteration to the next; that is, stop if
.I "(J(i-1) - J(i))/J(i) <"
.IR threshold ,
where
.I J(i) 
is the Lagrangian cost for the ith iteration and is
averaged over the entire training set.  
Note: one (and only one) of 
.B \-t
and 
.B \-I
must be given.  
.SH "SEE ALSO"
.BR ecvqencode (1),
.BR QccPackVQ (3),
.BR QccPack (3)

P. A. Chou, T. Lookabaugh, and R. M. Gray, "Entropy-constrained Vector
Quantization," IEEE Transactions on Acoustics, Speech, and Signal
Processing, vol. 37, pp. 31-42, January 1989.

.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them and/or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
