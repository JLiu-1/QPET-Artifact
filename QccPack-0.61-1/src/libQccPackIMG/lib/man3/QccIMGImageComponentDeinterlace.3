.TH QCCIMGIMAGECOMPONENTDEINTERLACE 3 "QCCPACK" ""
.SH NAME
QccIMGImageComponentDeinterlace,
QccIMGImageDeinterlace,
QccIMGImageSequenceDeinterlace
\- 
image, image-component, and image-sequence deinterlacing
.SH SYNOPSIS
.B #include "libQccPack.h"
.sp
.BI "int QccIMGImageComponentDeinterlace(const QccIMGImageComponent *" input_component ", QccIMGImageComponent *" output_component1 ", QccIMGImageComponent *" output_component2 );
.br
.sp
.BI "int QccIMGImageDeinterlace(const QccIMGImage *" input_image ", QccIMGImage *" output_image1 ", QccIMGImage *" output_image2 );
.br
.sp
.BR "int QccIMGImageSequenceDeinterlace(QccIMGImageSequence *" input_sequence ", QccIMGImageSequence *" output_sequence ", int " supersample );
.SH DESCRIPTION
.BR QccIMGImageComponentDeinterlace()
is a simple image deinterlacer that converts
an interlaced image component,
.IR input_component ,
into two non-interlaced (progressive) image components,
.IR output_component1
and
.IR output_component2 .
In effect,
.BR QccIMGImageComponentDeinterlace()
implements simple line doubling with interpolation,
in which the top field (even lines) of
.IR input_component
are copied directly into the even lines of
.IR output_component1
while the odd lines of
.IR output_component1
are created by averaging the nearest two even lines.
Likewise, the bottom field (odd lines) of
.IR input_component
are copied directly into the odd lines of
.IR output_component2
while the even lines of
.IR output_component2
are created by averaging the nearest two odd lines.
.LP
.IR input_component ,
.IR output_component1 ,
and
.IR output_component2
must all be the same size, and
.IR output_component1 ,
and
.IR output_component2
must be allocated prior to calling
.BR QccIMGImageComponentDeinterlace() .
.LP
.BR QccIMGImageDeinterlace()
deinterlaces
.IR input_image ,
producing two non-interlaced (progressive) images,
.IR output_image1
and
.IR output_image2 .
In effect,
.BR QccIMGImageDeinterlace()
simply calls
.BR QccIMGImageComponentDeinterlace()
for each of the
.IR Y ,
.IR U ,
and
.IR V
components of the images.
.LP
.BR QccIMGImageSequenceDeinterlace()
converts interlaced-scanned images of sequence
.IR input_sequence
to progressive-scanned images which are output to
.IR output_sequence .
.BR QccIMGImageSequenceDeinterlace()
operates in one of two modes depending on the value of
.IR supersample .
.LP
If
.IR supersample
is 0,
.BR QccIMGImageSequenceDeinterlace()
deinterlaces each frame of the sequence via a call to
.BR QccIMGImageDeinterlace() ,
and outputs the first frame of the deinterlaced output frame pair to
.IR output_sequence .
Note that, in this mode of operation, the second deinterlaced frame output by
.BR QccIMGImageDeinterlace()
is discarded, so that
.I output_sequence
has exactly the same number of frames as
.IR input_sequence .
.LP
The second mode of operation for
.BR QccIMGImageSequenceDeinterlace()
is specified when
.IR supersample
is non-zero.
In this mode of operation, both deinterlaced frames output by
.BR QccIMGImageDeinterlace()
are retained and output to
.IR output_sequence .
In this mode of operation, 
.I output_sequence
has twice as many frames as
.IR input_sequence ;
i.e., the temporal sampling rate is doubled.
.LP
The first frame of
.IR output_sequence
has the same number as the first frame of
.IR input_sequence .
The starting and ending frame numbers of
.IR input_sequence
must be known, and
.IR input_sequence->current_frame
must be allocated, prior to calling
.IR QccIMGImageSequenceDeinterlace() .
That is,
.BR QccIMGImageSequenceFindFrameNums (3)
and
.BR QccIMGImageSequenceStartRead (3)
should be called on
.IR input_sequence
prior to calling
.IR QccIMGImageSequenceDeinterlace() .
Additionally,
.IR output_sequence
must be allocated to the same image size as
.IR input_sequence
via a call to
.IR QccIMGImageSequenceAlloc (3)
prior to calling
.IR QccIMGImageSequenceDeinterlace() .
.SH "RETURN VALUE"
These routines return 0 on success, 1 on failure.
.SH "SEE ALSO"
.BR QccIMGImageComponent (3),
.BR QccIMGImage (3),
.BR QccIMGImageSequence (3),
.BR QccPackIMG (3),
.BR QccPack (3)

.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them an.or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
