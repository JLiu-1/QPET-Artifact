.TH QCCHYPRKLTTRAIN 3 "QCCPACK" ""
.SH NAME
QccHYPrkltTrain,
QccHYPrkltFactorization,
QccHYPrkltTransform,
QccHYPrkltInverseTransform
\- training, factorization, and forward/inverse transform for
the reversible KLT
.SH SYNOPSIS
.B #include "libQccPack.h"
.sp
.BI "int QccHYPrkltTrain(const QccVolumeInt " image ", int " num_bands ", int " num_rows ", int " num_cols ", QccHYPrklt *" rklt );
.br
.BI "int QccHYPrkltFactorization(QccHYPrklt *" rklt );
.br
.BI "int QccHYPrkltTransform(QccVolumeInt " image ", int " num_bands ", int " num_rows ", int " num_cols ", const QccHYPrklt *" rklt " );
.br
.BI "int QccHYPrkltInverseTransform(QccVolumeInt " image ", int " num_bands ", int " num_rows ", int " num_cols ", const QccHYPrklt *" rklt );
.SH DESCRIPTION
.BR QccHYPrkltTrain()
determines the KLT transform mean vector and transform matrix
for the pixel vectors contained in
.IR image .
Together, the mean vector and transform matrix constitute the KLT
for
.IR image ,
and they are returned in
.IR rklt .
.IR rklt
must be allocated prior to calling
.BR QccHYPrkltTrain() ;
furthermore, the
.IR num_bands
field of
.IR klt
must match the
.IR num_frames
field of
.IR image
(i.e., the number of frames of the image cube is considered to be
the number of spectral bands of the hyperspectral image).
The operation of
.BR QccHYPrkltTrain()
is essentially the same as that of
.BR QccHYPkltTrain (3);
the primary difference is that the mean vector
is integer-valued as is needed for a reversible KLT.
.LP
.BR QccHYPrkltFactorization()
factors the KLT matrix into the lifting-step matrices. See
.BR QccHYPrklt (3)
for more details on this process.
.BR QccHYPrkltTrain()
must be called prior to calling
.BR QccHYPrkltFactorization() .
.BR QccHYPrkltFactorization()
sets
.IR rklt -> factored .
.LP
.BR QccHYPrkltTransform()
applies the forward reversible KLT spectrally to each pixel vector in
.IR image ,
which is overwritten with the transformed dataset.
.BR QccHYPrkltFactorization()
must be called on
.IR rklt
prior to calling
.BR QccHYPrkltTransform()
which checks to see if
.IR rklt -> factored
is set and returns in error if it is not.
.LP
.BR QccHYPrkltInverseTransform()
is the corresponding inverse reversible transform.
.BR QccHYPrkltFactorization()
must be called on
.IR rklt
prior to calling
.BR QccHYPrkltInverseTransform()
which checks to see if
.IR rklt -> factored
is set and returns in error if it is not.
.SH "THEORY"
See
.BR QccHYPrklt (3).
.SH "RETURN VALUE"
Both routines
return 0 on success, 1 on error.
.SH "SEE ALSO"
.BR QccHYPrklt (3),
.BR QccHYPkltTrain (3),
.BR QccPackHYP (3),
.BR QccPack (3)
.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them an.or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
