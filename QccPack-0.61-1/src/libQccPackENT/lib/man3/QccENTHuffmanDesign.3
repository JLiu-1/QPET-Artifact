.TH QCCENTHUFFMANDESIGN 3 "QCCPACK" ""
.SH NAME
QccENTHuffmanDesign \-
design of Huffman code table from probability distribution
.SH SYNOPSIS
.B #include "libQccPack.h"
.sp
.BI "int QccENTHuffmanDesign(const int *" symbols ", const double *" probabilities ", int " num_symbols ", QccENTHuffmanTable *" huffman_table );
.SH DESCRIPTION
.BR QccENTHuffmanDesign()
designs a Huffman code table for the alphabet of
symbols given in
.I symbols
and their associated
.I probabilities
of occurrence.
.I num_symbols
gives the number of symbols in the alphabet.
The symbols themselves must be nonnegative integers less than or
equal to
.BR QCCENTHUFFMAN_MAXSYMBOL 
(currently,
.BR QCCENTHUFFMAN_MAXSYMBOL
is defined to be 100000).
The
.I probabilities
are nonnegative doubles
less than 1; the sum of all the probabilities should be equal to 1.0.
.LP
.BR QccENTHuffmanDesign()
can create a Huffman code table suitable for decoding or encoding
using the functions
.BR QccENTHuffmanEncode (3)
and
.BR QccENTHuffmanDecode (3),
respectively.
For an encoding table,
.IR huffman_table -> table_type
should be set to
.BR QCCENTHUFFMAN_ENCODETABLE
before calling
.BR QccENTHuffmanDesign() .
For a decoding table,
.IR huffman_table -> table_type
should be set to
.BR QCCENTHUFFMAN_DECODETABLE
before calling
.BR QccENTHuffmanDesign() .
.LP
.BR QccENTHuffmanDesign()
will allocate space for the Huffman code table via a call to
.BR QccENTHuffmanTableAlloc (3)
so this does not need to be done in advance.
.LP
Any of the symbols
which have zero probabilities
are not included in the output Huffman code table.
That is, such zero-probability symbols are not included in
the building of the Huffman code tree, are therefore do
not get Huffman codewords assigned to them.
.LP
The design algorithm employed by
.BR QccENTHuffmanDesign()
is essentially identical to the tree-based
technique described in Huffman's original paper.
In order to keep the implementations of encoding and decoding
practical, the length of Huffman codewords has been limited to
.BR QCCENTHUFFMAN_MAXCODEWORDLEN
(31 bits) in this implementation.
Unfortunately, Huffman's original algorithm cannot predict the
length of the longest codeword in advance of designing the code tree,
nor can it place an upper bound on codeword lengths.
As a result,
.BR QccENTHuffmanDesign()
will fail if, while designing the Huffman code, it encounters a
situation that requires a codeword of length longer than
.BR QCCENTHUFFMAN_MAXCODEWORDLEN
bits; this problem often arises when the symbol alphabet contains a
large number of symbols that have relatively small probabilities.
In such a case, attempts to generate the code table are
terminated, and a return value of 1 is returned to the calling
procedure.
.LP
It would probably be better to have the implementation resort to a
modified Huffman code (i.e., a code in which low-probability symbols
are "collapsed" into a single node in the code tree, and a Hufffman-code
prefix along with a fixed-length code is used for the collapsed symbols)
if a Huffman code cannot be built
without exceeding
.BR QCCENTHUFFMAN_MAXCODEWORDLEN
codeword length.
This has not be done in this implementation, however.
.SH "RETURN VALUE"
These routines return 0 on success, and 1 on failure.
.SH "SEE ALSO"
.BR QccENTHuffmanEncode (3),
.BR QccENTHuffmanDecode (3),
.BR QccENTHuffmanTable (3),
.BR QccPackENT (3),
.BR QccPack (3)
.LP
D. A. Huffman, "A Method for the Construction of Minimum-Redundancy Codes,"
.IR "Proceedings of the IRE" ,
vol. 40, pp. 1098-1101, September 1952.
.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them an.or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

