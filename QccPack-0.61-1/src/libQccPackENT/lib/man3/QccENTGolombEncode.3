.TH QCCENTGOLOMBENCODE 3 "QCCPACK" ""
.SH NAME
QccENTGolombEncode, QccENTGolombDecode \- 
Golomb encoding and decoding for binary sequence
.SH SYNOPSIS
.B #include "libQccPack.h"
.sp
.BI "int QccENTGolombEncode(QccBitBuffer *" output_buffer ", const int *" symbols ", int " num_symbols ", const float *" p ", const int *" m ");
.br
.BI "int QccENTGolombDecode(QccBitBuffer *" input_buffer ", int *" symbols ", int " num_symbols ");
.SH DESCRIPTION
.BR QccENTGolombEncode()
performs Golomb coding of the symbol stream in
.IR symbols ", outputting the binary codewords to "
.IR output_buffer .
.I num_symbols
indicates how many symbols are in the symbol stream (which can be as short as one symbol).
Since Golomb coding is a binary entropy coder, the symbol stream,
.IR symbols ", can consist of only zeros and ones. "
.IR p " specifies the probability of the favorable event."
.IR m " is the integer that satisfies"
.IR p ^ m " = 1/2. " output_buffer " must be a "
.BR QccBitBuffer " that has been opened for writing prior to calling "
.BR QccENTGolombEncode() .
.RB "After calling " QccENTGolombEncode() ",
.BR QccBitBufferFlush (3)
must be called
to ensure that the last few bits of the bitstream are actually written to the output file.
.LP
.BR QccENTGolombDecode() " performs Golomb decoding of the bits in the bitstream "
.IR input_buffer ", producing an output stream of symbols that are stored in "
.IR symbols ". The "
.IR symbols " array must be allocated with space sufficient for holding "
.IR num_symbols " integers; this allocation must be done prior to calling "
.BR QccENTGolombDecode() .
.RI "Additionally, " input_buffer " must be opened for reading prior to calling "
.BR QccENTGolombDecode() .
.SH "NOTES"
.BR QccBitBufferFlush (3)
must be called after the call to
.BR QccENTGolombEncode() " to ensure that the last few bits of the "
concatenated bitstream are actually written to the output file.
.LP
.BR QccENTGolombEncode() " will fail if it encounters an invalid symbol "
(i.e., a symbol that is neither 0 or 1).
.LP
.RI "Obviously, " p " and " m " cannot be specified independently since "
.IR p ^ m " = 1/2. "
Both can be
.BR NULL ,
in which case the probability will be estimated by
.BR QccENTGolombEncode()
itself.
.SH "RETURN VALUE"
Both routines return 0 on success, and 1 on failure.
.SH "SEE ALSO"
.BR QccENTGolombEncodeChannel (3),
.BR QccENTGolombDecodeChannel (3),
.BR QccPackENT (3),
.BR QccPack (3)
.LP
S. W. Golomb, "Run-Length Encodings,"
.IR "IEEE Transactions on Information Theory" ,
vol. 12, pp. 399-401, July 1966.
.SH AUTHOR
Written by Yufei Yuan <yuanyufei@hotmail.com>

Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them an.or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
