.TH QCCWAVTCE3DENCODE 1 "QCCPACK" ""
.SH NAME
QccWAVtce3DEncode, QccWAVtce3DDecode \-
encode/decode an image cube using the 3D-TCE algorithm
.SH SYNOPSIS
.B #include "libQccPack.h"
.sp
.BI "int QccWAVtce3DEncode(const QccIMGImageCube *" image ", QccBitBuffer *" buffer ", int " transform_type ", int " temporal_num_levels ", int " spatial_num_levels ", double " alpha ", const QccWAVWavelet *" wavelet ", int " target_bit_cnt );
.sp
.BI "int QccWAVtce3DDecodeHeader(QccBitBuffer *" buffer ", int *" transform_type ", int *" temporal_num_levels ", int *" spatial_num_levels ", int *" num_frames ", int *" num_rows ", int *" num_cols ", double *" image_mean ", int *" max_coefficient_bits ", double *" alpha );
.sp
.BI "int QccWAVtce3DDecode(QccBitBuffer *" buffer ", QccIMGImageCube *" image ", int " transform_type ", int " temporal_num_levels ", int " spatial_num_levels ", double " alpha ", const QccWAVWavelet *" wavelet ", double " image_mean ", int " max_coefficient_bits ", int " target_bit_bit );
.SH DESCRIPTION
.SS Encoding
.LP
.B QccWAVtce3DEncode()
encodes an image cube,
.IR image ,
using a 3D generalization of the TCE algorithm.
The original TCE algorithm was developed for 2D images by
Tian and Hemami;
it was latter extended to 3D by Zhang
.IR "et al" .
The TCE (tarp coding using classification to achieve embedding) algorithm
is based on the tarp algorithm (see 
.BR QccWAVTarpEncode (3)),
but is designed to provide better rate-distortion performance
when used in an embedded fashion; i.e., when decoding is performed
at a rate less than that at which the bitstream was produced.
See "ALGORITHM" below for more detail.
.LP
.I image
is the image cube to be coded and
.I buffer
is the output bitstream.
.I buffer
must be of
.B QCCBITBUFFER_OUTPUT
type and opened via a prior call to
.BR QccBitBufferStart (3).
.LP
.BR QccWAVtce3DEncode ()
supports the use of both wavelet-packet and dyadic wavelet-transform
decompositions.
If
.IR transform_type
is
.BR QCCWAVSUBBANDPYRAMID3D_DYADIC ,
a dyadic DWT is used; if
.IR transform_type
is
.BR QCCWAVSUBBANDPYRAMID3D_PACKET ,
a wavelet-packet DWT is used.
.IR temporal_num_levels 
and
.IR spatial_num_levels
give the number of levels of wavelet decomposition to perform
for both transform types; for a dyadic transform,
.IR temporal_num_levels 
should equal
.IR spatial_num_levels .
.I wavelet
is the wavelet to use for decomposition.
.LP
The 3D-TCE algorithm performance is in part through
the parameter
.IR alpha ,
a value that gives the learning rate of the density-estimation
process implemented by the tarp filter used in one of
the coding passes of the TCE algorithm.
.LP
The bitstream output from the 3D-TCE encoder is embedded, meaning that
any prefix of the bitstream can be decoded to give a valid 
representation of the image.  The 3D-TCE encoder essentially produces
output bits until the number of bits output reaches
.IR target_bit_cnt ,
the desired (target) total length of the output bitstream in bits,
and then it stops.
Note that this is the bitstream length in bits, not the rate of the bitstream
(which would be expressed in bits per voxel).
.LP
.SS Decoding
.LP
.B QccWAVtce3DDecodeHeader()
decodes the header information 
in a bitstream previously produced by
.BR QccWAVtce3DEncode() .
The input bitstream is
.I buffer
which must be of
.B QCCBITBUFFER_INPUT
type and opened via a prior call to
.BR QccBitBufferStart (3).
.LP
The header information is returned in
.I transform_type
(either
.BR QCCWAVSUBBANDPYRAMID3D_DYADIC 
or
.BR QCCWAVSUBBANDPYRAMID3D_PACKET 
to indicate a dyadic or wavelet-packet transform decomposition, respectively),
.I temporal_num_levels
(number of levels of wavelet decomposition in the temporal direction),
.I spatial_num_levels
(number of levels of wavelet decomposition in the spatial directions),
.I num_frames
(size of the image cube in the temporal direction),
.I num_rows
(vertical size of image cube),
.I num_cols
(horizontal size of image cube),
.I image_mean
(the mean value of the original image cube),
.I max_coefficient_bits
(indicates the precision, in number of bits, of the wavelet coefficient
with the largest magnitude),
and
.I alpha
(the value of the learning rate).
.LP
.B QccWAVtce3DDecode()
decodes the bitstream
.IR buffer ,
producing the reconstructed image cube,
.IR image .
The bitstream must already have had its header read by a prior call
to
.B QccWAVtce3DDecodeHeader()
(i.e., you call
.B QccWAVtce3DDecodeHeader() 
first and then
.BR QccWAVtce3DDecode() ).
If
.I target_bit_cnt
is
.BR QCCENT_ANYNUMBITS ,
then decoding stops when the end of the input bitstream is reached;
otherwise, decoding stops when
.I target_num_bits
from the input bitstream have been decoded.
.SH "ALGORITHM"
It is widely believed that, in the wavelet domain, coefficients 
in a local neighborhood
capture essential context information, such as edges and patterns, and that
this information can facilitate compression.
Many image coders exploit such local information in the form of 
adaptive entropy coding.
Alternatively, tarp filtering (see
.BR QccWAVtarpEncode (3))
produces probability estimates through an IIR filtering technique
on the bitplanes of  the wavelet coefficients. 
While providing very good 
performance when used in a nonembedded manner, the original 
tarp coder performs less competitively when used in an 
embedded manner, in spite of its operation on bitplanes.
The reason is that 
the underlying tarp filter is designed to follow
a raster-scan encoding order;
however, the use of fractional bitplanes (see Ordentlich
.IR "et al" .)
provides better rate-distortion performance for embedding. Such fractional
bitplanes require an encoding 
order more flexible than a simple raster scan.  In the TCE algorithm,
coefficients are classified according to statistical properties, and
the tarp filter is run on only the single class on which it tends to generate 
accurate probability estimates.
.LP
In the TCE algorithm,
.I nonzero-parent
coefficients and
.I run
coefficients from the fractional-bitplane approach of Ordentlich
.IR "et al" .
are combined to form a single class, the
.I zero-run
coefficients. For each bitplane, the TCE system then performs
three passes:  1) adaptive arithmetic 
coding of bits of
.I nonzero-neighbor
coefficients; 2) tarp 
filtering and non-adaptive 
arithmetic coding of
.I zero-run
coefficients; and 3) encoding of refinement 
bits with an adaptive arithmetic coder.
The sign bits of coefficients are coded when needed with a probability 
of 0.5. The encoding/decoding ends when the target rate is reached. 
Tian and Hemami describe several approaches to improving the probability
estimate of the tarp filtering of the second pass.
.SH "SEE ALSO"
.BR tceencode3d (1),
.BR tcedecode3d (1),
.BR QccBitBuffer (3),
.BR QccWAVSubbandPyramid3D (3),
.BR QccWAVSubbandPyramid3DDWT (3),
.BR QccWAVtceEncode (3),
.BR QccPackWAV (3),
.BR QccPackIMG (3),
.BR QccPack (3)

.LP
C. Tian and S. S. Hemami, "An Embedded Image Coding System
Based on Tarp Filter with Classification," in
.IR "Proceedings of the International Conference on Acoustics, Speech, and Signal Processing" ,
Montreal, Quebec, Canada, May 2004, vol. 3, pp. 49-52.

J. Zhang, J. E. Fowler, and G. Liu,
"Lossy-to-Lossless Compression of Hyperspectral Imagery Using
3D-TCE and an Integer KLT," 
.IR "IEEE Geoscience and Remote Sensing Letters" ,
vol. 5, pp. 814-818, October 2008.

E. Ordentlich, M. Weinberger, and G. Seroussi,
"A Low-Complexity Modeling Approach for Embedded Coding of
Wavelet Coefficients," in
.IR "Proceedings of the IEEE Data Compression Conference" ,
Snowbird, UT, March 2002, pp. 23-32.

.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them and/or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
