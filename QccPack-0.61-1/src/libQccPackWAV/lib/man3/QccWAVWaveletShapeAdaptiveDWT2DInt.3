.TH QCCWAVWAVELETSHAPEADAPTIVEDWT2DINT 3 "QCCPACK" ""
.SH NAME
QccWAVWaveletShapeAdaptiveDWT2DInt, QccWAVWaveletInverseShapeAdaptiveDWT2DInt \- 
integer-valued separable 2D shape-adaptive discrete
wavelet transform and inverse transform for a 2D signal
.SH SYNOPSIS
.B #include "libQccPack.h"
.sp
.BI "int QccWAVWaveletShapeAdaptiveDWT2DInt(QccMatrixInt " signal ", QccMatrixInt " mask ", int " num_rows ", int " num_cols ", int " num_scales ", const QccWAVWavelet *" wavelet );
.sp
.BI "int QccWAVWaveletInverseShapeAdaptiveDWT2DInt(QccMatrixInt " signal ", QccMatrixInt " mask ", int " num_rows ", int " num_cols ", int " num_scales ", const QccWAVWavelet *" wavelet );
.SH DESCRIPTION
.B QccWAVWaveletShapeAdaptiveDWT2DInt()
performs an integer-valued separable 2D
shape-adaptive discrete wavelet transform (SA-DWT) of a two-dimensional signal,
.IR signal ,
which is represented as a matrix of
.I num_rows
rows and
.I num_cols
columns.
.I num_scales
gives the number of scales, or levels, of the decomposition.
.BR QccWAVWaveletShapeAdaptiveDWT2DInt()
implements a dyadic decomposition of
.IR signal ;
that is, the low-low subband (baseband)
is recursively decomposed into a lowpass and
three highpass bands for each level of decomposition.
The output of the DWT is returned in
.IR signal ,
overwriting the original input signal.
The output subbands reside in 
.I signal
with the baseband in the upper-left corner, with highpass subbands
successively "nested" from the upper-left corner to lower-right corner.
.I wavelet
must indicate an integer-valued lifting scheme (see
.BR QccWAVLiftingSchemeInteger (3)).
.LP
.I mask
indicates where the original input
.I signal
exists. That is, 
.I mask
indicates the regions of support in the original input
.IR signal .
Where
.I mask
is less than or equal to
.BR QCCALPHA_TRANSPARENT ,
there is no signal, and where
.I mask
is greater than
.BR QCCALPHA_TRANSPARENT ,
signal exists and is transformed
(see
.BR QccAlpha (3)).
.LP
Essentially, the 2D SA-DWT is implemented by doing one scale of a
1D SA-DWT for each row, and then for each column.
See 
.BR QccWAVWaveletShapeAdaptiveDWT1DInt (3)
for specific details on how this 1D SA-DWT is calculated.
.LP
The transparency mask is transformed (with a 2D Lazy wavelet transform)
alongside the signal so that
.IR mask
indicates where valid coefficients, i.e., coefficients resulting from
non-transparent regions in the original input signal, reside in
the output
.IR signal .
The transformed mask is returned in
.IR mask ,
overwriting the original input mask.
.LP
Currently, 
.BR QccWAVWaveletShapeAdaptiveDWT1DInt()
supports only integer-valued biorthogonal wavelets. These may be
used with symmetric extension only.
.LP
.B QccWAVWaveletInverseShapeAdaptiveDWT2DInt()
performs the corresponding separable 2D inverse SA-DWT of
.IR signal
which is assumed to have been produced
by
.BR QccWAVWaveletShapeAdaptiveDWT2DInt() .
.IR mask
should be the corresponding Lazy-wavelet transformed mask
also produced by
.BR QccWAVWaveletShapeAdaptiveDWT2DInt() .
.I num_scales
gives the number of levels of decomposition that exist in
.IR signal .
.LP
Use
.BR QccWAVSubbandPyramidIntShapeAdaptiveDWT (3)
and
.BR QccWAVSubbandPyramidIntInverseShapeAdaptiveDWT (3)
to perform a 2D separable SA-DWT or inverse SA-DWT on a
.B QccWAVSubbandPyramidInt
data structure (which is the recommended way to do it, since the
.B QccWAVSubbandPyramidInt
structure stores the number of levels of decomposition along with
the transform coefficients).
.SH "RETURN VALUES"
These routines
return 0 on success and 1 on error.
.SH "NOTES"
SA-DWTs have been recently included in Version 2 of the MPEG-4
standard, wherein they are used for 
texture coding of arbitrarily shaped still objects.
Li and Li (see below) elaborate at length on the shape-adaptive DWT
used in MPEG-4, and also consider some variants not included
in the MPEG-4 standard.
See 
.BR QccWAVWaveletShapeAdaptiveDWT1DInt (3)
for details on the differences between the QccPack SA-DWT implementation,
the MPEG-4 specification, and Li and Li's descriptions.
See
.BR QccWAVWaveletShapeAdaptiveDWT1DInt (3)
also for a description of how integer-valued lifting is implemented.
.SH "SEE ALSO"
.BR QccWAVWaveletShapeAdaptiveDWT1DInt (3),
.BR QccWAVWaveletInverseShapeAdaptiveDWT1DInt (3),
.BR QccWAVSubbandPyramidIntShapeAdaptiveDWT (3),
.BR QccWAVSubbandPyramidIntInverseShapeAdaptiveDWT (3),
.BR QccWAVWavelet (3),
.BR QccPackWAV (3),
.BR QccPack (3)
.LP
S. Li and W. Li, "Shape-Adaptive Discrete Wavelet Transforms for
Arbitrarily Shaped Visual Object Coding,"
.IR "IEEE Transactions on Circuits and Systems for Video Coding" ,
vol. 10, pp. 725-743, August 2000.

ISO/IEC 14496-2, "Information Technology -- Coding of audio-visual objects --
Part 2: Visual," 
.IR "MPEG-4 Standard" ,
Amendment 1, July 2000.

A. R. Calderbank, I. Daubechies, W. Sweldens, B.-L. Yeo, "Lossless
Image Compression Using Integer to Integer Wavelet Transforms", in
.IR "Proceedings of the International Conference on Image Processing" ,
Lausanne, Switzerland, pp. 596-599, September 1997.

Z. Xiong, X. Wu, S. Cheng, J. Hua, "Lossy-to-Lossless Compression of
Medical Volumetric Data Using Three-Dimensional Integer Wavelet Transforms,"
.IR "IEEE Transactions on Medical Imaging" ,
vol. 22, pp. 459-470, March 2003.

I. Daubechies and W. Sweldens,
"Factoring Wavelet Transforms Into Lifting Steps,"
.IR "J. Fourier Anal. Appl." ,
vol. 4, no. 3, pp. 245-267, 1998.
.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them an.or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.



