.TH QCCWAVWAVELETANALYSIS1DINT 3 "QCCPACK" ""
.SH NAME
QccWAVWaveletAnalysis1DInt, QccWAVWaveletSynthesis1DInt \- 
integer-valued wavelet analysis/synthesis of a 1D signal
.SH SYNOPSIS
.B #include "libQccPack.h"
.sp
.BI "int QccWAVWaveletAnalysis1DInt(QccVectorInt " signal ", int " signal_length ", int " phase ", const QccWAVWavelet *" wavelet );
.br
.BI "int QccWAVWaveletSynthesis1DInt(QccVectorInt " signal ", int " signal_length ", int " phase ", const QccWAVWavelet *" wavelet );
.SH DESCRIPTION
.B QccWAVWaveletAnalysis1DInt()
performs one level of an integer-valued
wavelet decomposition for a one-dimensional signal.
Essentially,
.BR QccWAVWaveletAnalysis1DInt()
calls
.BR QccWAVLiftingAnalysisInt (3) .
.I phase
indicates whether 
.I signal
is to start with an odd- or even-indexed sample;
that is, whether odd- or even-phase subsampling
is employed after filtering.
.I phase
can be either
.B QCCWAVWAVELET_PHASE_EVEN
or
.BR QCCWAVWAVELET_PHASE_ODD .
Additionally,
.I signal_length
can be even or odd.
.I wavelet
must indicate an integer-valued lifting scheme (see
.BR QccWAVLiftingSchemeInteger (3)).
.LP
.B QccWAVWaveletSynthesis1DInt()
performs one level of wavelet synthesis.  The first half of
.I signal
is assumed to contain the lowpass subband while the second half contains
the highpass subband.
.B QccWAVWaveletSynthesis1DInt()
calls
.BR QccWAVLiftingSynthesisInt (3).
.I phase
indicates whether 
.I signal
is to start with an odd- or even-indexed sample.
.I signal_length
can be even or odd.
.LP
Note:
In general, you will probably want to use
.BR QccWAVWaveletDWT1DInt (3)
and
.BR QccWAVWaveletInverseDWT1DInt (3)
instead of these routines
for implementing a discrete wavelet transform and its inverse since
.BR QccWAVWaveletDWT1DInt (3)
and
.BR QccWAVWaveletInverseDWT1DInt (3)
allow any number of scales, or levels, of decomposition to be
performed.
.SH "INTEGER-TO-INTEGER WAVELET TRANSFORMS"
Transforms generally provide perfect reconstruction in that the
inverse transform will perfectly invert transform coefficients
into an exact representation of the original signal.
However, when implemented in floating-point arithmetic, the potential
for loss arises due to the limits of finite precision in both the
forward and inverse transforms.
On the other hand,
transforms that map integer-valued signals into integer-valued
transforms coefficients can guarantee perfect reconstruction, provided
an inverse transform can be found.
For this reason, lifting schemes, in which inverse transforms are
trivial, are favored for the
implementation of integer-valued wavelet transforms. Typically,
the general approach proposed by Calderbank
.IR "et al" .
is followed wherein rounding of floating-point values to integers is performed
at each prediction and update step in a lifting scheme.
Integer versions of several popular biorthogonal wavelets were
created in this manner by Calderbank
.IR "et al" .,
as well as by Xiong
.IR "et al" .
.LP
In traditional floating-point lifting, the prediction and update steps
are generally followed by a single application of scaling by a constant
in order to produce the usual unitary normalization.
This scaling step is somewhat problematic for integer-valued lifting
since the scaling constant is usually not an integer.
In applications wherein unitary scaling is not required
(e.g., in some applications that process each subband completely
independently), the scaling step is simply dropped in order
to implement an integer-valued version of the transform.
Alternatively, one can append three additional lifting steps to 
implement the scaling; these additional lifting steps can then be rendered
integer-valued via appropriate rounding (e.g., Xiong
.IR "et al" .)
making the transforms approximately normalized.
This latter approach of scaling via additional lifting steps
is employed in the integer-valued
lifting schemes implemented in QccPack.
.SH "RETURN VALUES"
These routines
return 0 on success and 1 on error.
.SH "SEE ALSO"
.BR QccWAVLiftingScheme (3),
.BR QccWAVLiftingAnalysisInt (3),
.BR QccWAVWavelet (3),
.BR QccWAVWaveletDWT1DInt (3),
.BR QccWAVWaveletInverseDWT1DInt (3),
.BR QccPackWAV (3),
.BR QccPack (3)
.LP
A. R. Calderbank, I. Daubechies, W. Sweldens, B.-L. Yeo, "Lossless
Image Compression Using Integer to Integer Wavelet Transforms", in
.IR "Proceedings of the International Conference on Image Processing" ,
Lausanne, Switzerland, pp. 596-599, September 1997.

Z. Xiong, X. Wu, S. Cheng, J. Hua, "Lossy-to-Lossless Compression of
Medical Volumetric Data Using Three-Dimensional Integer Wavelet Transforms,"
.IR "IEEE Transactions on Medical Imaging" ,
vol. 22, pp. 459-470, March 2003.

I. Daubechies and W. Sweldens,
"Factoring Wavelet Transforms Into Lifting Steps,"
.IR "J. Fourier Anal. Appl." ,
vol. 4, no. 3, pp. 245-267, 1998.
.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them an.or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.



