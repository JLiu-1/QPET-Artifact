.TH QCCWAVKLTTCE3DLOSSLESSENCODE 1 "QCCPACK" ""
.SH NAME
QccWAVklttce3DLosslessEncode, QccWAVklttce3DLosslessDecode \-
encode/decode an image cube using the lossless KLT+3D-TCE algorithm
.SH SYNOPSIS
.B #include "libQccPack.h"
.sp
.BI "int QccWAVklttce3DLosslessEncode(const QccIMGImageCube *" image ", QccBitBuffer *" buffer ", int " num_levels ", double " alpha ", const QccWAVWavelet *" wavelet );
.sp
.BI "int QccWAVklttce3DLosslessDecodeHeader(QccBitBuffer *" buffer ", int *" num_levels ", int *" num_frames ", int *" num_rows ", int *" num_cols ", int *" max_coefficient_bits ", double *" alpha );
.sp
.BI "int QccWAVklttce3DLosslessDecode(QccBitBuffer *" buffer ", QccIMGImageCube *" image ", int " num_levels ", double " alpha ", const QccWAVWavelet *" wavelet ", int " max_coefficient_bits ", int " target_bit_bit );
.SH DESCRIPTION
.SS Encoding
.LP
.B QccWAVklttce3DLosslessEncode()
encodes an image cube,
.IR image ,
using a 3D generalization of the TCE algorithm that involves
a KLT transform in one dimension and a dyadic DWT in the other two.
Both transforms are applied in a lossless, or reversible, fashion such
that integers are mapped to integers. Consequently, lossless coding is
achieved.
See "ALGORITHM" below for more detail.
.LP
.I image
is the image cube to be coded and
.I buffer
is the output bitstream.
.I buffer
must be of
.B QCCBITBUFFER_OUTPUT
type and opened via a prior call to
.BR QccBitBufferStart (3).
.LP
.BR QccWAVklttce3DLosslessEncode ()
first applies a reversible KLT (RKLT)
in the spectral or temporal dimension of the
image cube; subsequently, a reversible dyadic DWT is applied spatially.
.IR num_levels
give the number of levels of wavelet decomposition to perform.
.I wavelet
is the wavelet to use for decomposition.
.LP
.BR QccWAVklttce3DLosslessEncode()
uses
.BR QccHYPrkltTrain (3),
.BR QccHYPrkltFactorization (3),
and
.BR QccHYPrkltTransform (3)
to train, factor, and apply, respectively, the spectral RKLT.
Then,
.BR QccWAVSubbandPyramid3DIntDWT (3)
with zero temporal decomposition levels
is used to apply the integer-valued spatial DWT to each frame of the image cube.
.BR QccWAVklttce3DLosslessEncode()
embeds the RKLT transform matrix into the output bitstream as overhead
information.
.LP
The KLT+3D-TCE algorithm performance is in part through
the parameter
.IR alpha ,
a value that gives the learning rate of the density-estimation
process implemented by the tarp filter used in one of
the coding passes of the TCE algorithm.
.LP
The bitstream output from the KLT+3D-TCE encoder is embedded, meaning that
any prefix of the bitstream can be decoded to give a valid, albeit lossy,
representation of the image.
.LP
.SS Decoding
.LP
.B QccWAVklttce3DLosslessDecodeHeader()
decodes the header information 
in a bitstream previously produced by
.BR QccWAVklttce3DLosslessEncode() .
The input bitstream is
.I buffer
which must be of
.B QCCBITBUFFER_INPUT
type and opened via a prior call to
.BR QccBitBufferStart (3).
.LP
The header information is returned in
.I num_levels
(number of levels of wavelet decomposition in the spatial directions),
.I num_frames
(size of the image cube in the temporal direction),
.I num_rows
(vertical size of image cube),
.I num_cols
(horizontal size of image cube),
.I max_coefficient_bits
(indicates the precision, in number of bits, of the wavelet coefficient
with the largest magnitude),
and
.I alpha
(the value of the learning rate).
.LP
.B QccWAVklttce3DLosslessDecode()
decodes the bitstream
.IR buffer ,
producing the reconstructed image cube,
.IR image .
The bitstream must already have had its header read by a prior call
to
.B QccWAVklttce3DLosslessDecodeHeader()
(i.e., you call
.B QccWAVklttce3DLosslessDecodeHeader() 
first and then
.BR QccWAVklttce3DLosslessDecode() ).
If
.I target_bit_cnt
is
.BR QCCENT_ANYNUMBITS ,
then decoding stops when the end of the input bitstream is reached;
i.e.,
.IR image
will be a lossless reconstruction of the original image.
Otherwise, decoding stops when
.I target_num_bits
from the input bitstream have been decoded which
will produce a lossy representation that differs from the
originally encoded image.
.SH "ALGORITHM"
The original TCE algorithm (see
.BR QccWAVtce3DLosslessEncode() )
was developed for the lossy coding 2D images by
Tian and Hemami;
it was latter extended to 3D
and made lossless via the incorporation of reversible transforms
by Zhang
.IR "et al" .
Zhang
.IR "et al" .
considered two versions of lossless
3D-TCE: one using a 3D wavelet transform (this is
implemented here as
.BR QccWAVtce3DLosslessEncode (3) )
and one with a hybrid transform consisting of a spectral KLT followed
by a spatial dyadic DWT (i.e., KLT+3D-TCE as implemented by
.BR QccWAVklttce3DLosslessEncode() ).
.SH "SEE ALSO"
.BR klttceencode3d (1),
.BR klttcedecode3d (1),
.BR QccWAVtce3DLosslessEncode (3),
.BR QccHYPrkltTrain (3),
.BR QccHYPrkltTransform (3),
.BR QccHYPrklt (3),
.BR QccWAVSubbandPyramid3DIntDWT (3),
.BR QccBitBuffer (3),
.BR QccPackWAV (3),
.BR QccPackIMG (3),
.BR QccPack (3)

.LP
J. Zhang, J. E. Fowler, and G. Liu,
"Lossy-to-Lossless Compression of Hyperspectral Imagery Using
3D-TCE and an Integer KLT," 
.IR "IEEE Geoscience and Remote Sensing Letters" ,
vol. 5, pp. 814-818, October 2008.

C. Tian and S. S. Hemami, "An Embedded Image Coding System
Based on Tarp Filter with Classification," in
.IR "Proceedings of the International Conference on Acoustics, Speech, and Signal Processing" ,
Montreal, Quebec, Canada, May 2004, vol. 3, pp. 49-52.

.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them and/or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
