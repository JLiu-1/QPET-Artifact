.TH QCCWAVWAVELET 3 "QCCPACK" ""
.SH NAME
QccWAVWavelet \- 
data structure
.B QccWAVWavelet
for storing a wavelet
.SH SYNOPSIS
.B #include "libQccPack.h"
.sp
.BI "int QccWAVWaveletInitialize(QccWAVWavelet *" wavelet );
.br
.BI "int QccWAVWaveletAlloc(QccWAVWavelet *" wavelet );
.br
.BI "void QccWAVWaveletFree(QccWAVWavelet *" wavelet );
.br
.BI "int QccWAVWaveletPrint(const QccWAVWavelet *" wavelet );
.br
.BI "int QccWAVWaveletCreate(QccWAVWavelet *" wavelet ", const QccString " wavelet_filename ", const QccString " boundary );
.br
.BI "int QccWAVWaveletBiorthogonal(const QccWAVWavelet *" wavelet );
.SH DESCRIPTION
QccPack provides data structure
.B QccWAVWavelet
for representing a wavelet.
.LP
The components of a
.B QccWAVWavelet
structure are a field describing how the wavelet is implemented
(filter bank or lifting) and the appropriate structures for
this implementation.
.SH "DATA STRUCTURE"
The
.B QccWAVWavelet
data structure is defined as:
.RS
.nf

typedef struct
{
  int implementation;
  int boundary;
  QccWAVLiftingScheme lifting_scheme;
  QccWAVFilterBank filter_bank;
} QccWAVWavelet;
.fi
.RE
.LP
The fields of
.B QccWAVWavelet
are as follows:
.TP
.IR implementation
The implementation of the wavelet, either
.B QCCWAVWAVELET_IMPLEMENTATION_FILTERBANK
or
.BR QCCWAVWAVELET_IMPLEMENTATION_LIFTED .
.TP
.IR boundary
The type of processing to implement at signal boundaries (i.e., the
type of extension to use past the boundary).
.TP
.IR lifting_scheme
If the wavelet is of lifting implementation, 
.I lifting_scheme
stores the lifting-scheme structure.
.TP
.IR filter_bank
If the wavelet is of filter-bank implementation,
.I filter_bank
stores the filter-bank structure.
.LP
The boundary must be one of the following:
.BR QCCWAVWAVELET_BOUNDARY_SYMMETRIC_EXTENSION ,
.BR QCCWAVWAVELET_BOUNDARY_PERIODIC_EXTENSION ,
or
.BR QCCWAVWAVELET_BOUNDARY_BOUNDARY_WAVELET ,
which call for symmetric-extension, periodic-extension, or
boundary-wavelet handling, respectively, of the boundaries of the the signal.
Not all boundary methods are permitted for all wavelets; check the
comments at the start of filter-bank or lifting-scheme files
for possible values for particular wavelets.
.SH "ROUTINES"
.B QccWAVWaveletInitialize()
should be called before any use of a
.B QccWAVWavelet
structure.
.B QccWAVWaveletInitialize()
initializes the fields of
.I wavelet
to the following values:
.RS

.IR implementation :
-1 (undefined)
.br
.IR boundary :
-1 (undefined)
.RE
In addition,
.BR QccWAVFilterBankInitialize (3)
and
.BR QccWAVLiftingScheme (3)
are called for
.I filter_bank
and
.IR lifting_scheme .
.LP
.B QccWAVWaveletAlloc()
allocates the
.I filter_bank
structure of the wavelet by calling
.BR QccWAVFilterBankAlloc (3).
.LP
.B QccWAVWaveletFree()
frees the 
.I filter_bank
structure of the wavelet by calling
.BR QccWAVFilterBankFree (3).
.LP
.B QccWAVWaveletPrint()
prints the contents of
.I wavelet
to stdout.
.LP
.B QccWAVWaveletCreate()
searches the file path specified by the environment variable
.B QCCPACK_WAVELET_PATH
for the filename given by
.IR wavelet_filename .
If found, the file,
which must be of
.B FBK
or
.B LFT
format, is read.  
See 
.BR QccPackWAV (3)
for more information on the path search employed here.
The appropriate filter-bank or lifting-scheme 
structures are allocated and data fields filed in according to
the format of the file.
.I boundary
is a string (either "symmetric", "periodic", or "boundary") which
indicates the boundary-handling method to be employed for
the wavelet; the
.I boundary
field in
.I wavelet
is assigned the appropriate integer code.
.LP
.BR QccWAVWaveletBiorthogonal()
returns 1 if the underlying filter bank or lifting scheme of
.I wavelet
is biorthogonal, or 0 otherwise.
.SH "RETURN VALUE"
These routines return 0 on success, and 1 on failure.
.SH "SEE ALSO"
.BR QccPackWAV (3),
.BR QccPack (3)
.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them an.or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

