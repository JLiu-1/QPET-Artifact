.TH QCCWAVWAVELETLWT 3 "QCCPACK" ""
.SH NAME
QccWAVWaveletLWT, QccWAVWaveletInverseLWT \-
forward and inverse lazy wavelet transform
.SH SYNOPSIS
.B #include "libQccPack.h"
.sp
.BI "int QccWAVWaveletLWT(const QccVector " input_signal ", QccVector " output_signal ", int " signal_length ", int " signal_origin ", int " subsample_pattern );
.br
.BI "int QccWAVWaveletInverseLWT(const QccVector " input_signal ", QccVector " output_signal ", int " signal_length ", int " signal_origin ", int " subsample_pattern );
.SH DESCRIPTION
.B QccWAVWaveletLWT()
implements a lazy wavelet transform (LWT).
Essentially, the
.I input_signal
is partitioned into two sets: the even-indexed samples and
the odd-indexed samples.
Depending on
.I subsample_pattern
and
.IR signal_origin ,
one of these sets will be considered to be the
"lowpass" subband, while the other will be considered to be the
"highpass" subband.
.LP
.I signal_origin
gives the index number of the first sample of
.IR input_signal .
.I signal_origin
is used, in conjunction with
.IR subsample_pattern ,
to determine the phases of subsampling in each
level of the signal decomposition.
In most cases,
the signal starts with index 0, so
.I signal_origin
is 0.
.LP
.I subsample_pattern
may be either
.B QCCWAVWAVELET_PHASE_EVEN
or
.BR QCCWAVWAVELET_PHASE_ODD ,
indicating whether even- or odd-phase subsampling is desired.
In the usual case, even subsampling is normally used.
.LP
In the case that
.I signal_length
is even, both the odd and even "subbands" of the LWT
output are the same length.  On the other hand, if
.I signal_length
is odd, one of the two subbands will be one sample longer
than the other. Which subband will be longer will depend on
whether 
.IR signal_origin 
is odd or even, and also on which phase of subsampling is
specified by
.IR subsample_pattern .
.LP
If
.I signal_length
is less than 2,
.BR QccWAVWaveletLWT()
merely copies
.I input_signal
to 
.IR output_signal .
.LP
.BR QccWAVWaveletInverseLWT()
performs the opposite operation as
.BR QccWAVWaveletLWT() .
That is, even-index samples are extracted from
the start of
.I input_signal
and "interleaved" with odd-indexed samples extracted from
the end of
.IR input_signal .
.I signal_origin
and
.I subsample_pattern
are used to determine whether
.I output_signal
is to start with a odd- or even-indexed sample.
If
.I signal_length
is less than 2,
.I input_signal
is merely copied to
.IR output_signal .
.LP
For both of these routines,
.I output_signal
must be allocated to sufficient length before calling the routine.
.SH "RETURN VALUES"
Both
.BR QccWAVWaveletLWT()
and
.BR QccWAVWaveletInverseLWT()
return 0 on success and 1 on error.
.SH "SEE ALSO"
.BR QccPackWAV (3),
.BR QccPack (3)
.LP
I. Daubechies and W. Sweldens,
"Factoring Wavelet Transforms Into Lifting Steps,"
.IR "J. Fourier Anal. Appl." ,
vol. 4, no. 3, pp. 245-267, 1998.
.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them an.or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.



