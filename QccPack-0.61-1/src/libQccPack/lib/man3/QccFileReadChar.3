.TH QCCFILE 3 "QCCPACK" ""
.SH NAME
QccFileReadChar,
QccFileWriteChar,
QccFileReadInt,
QccFileWriteInt,
QccFileReadDouble,
QccFileWriteDouble,
QccFileReadString,
QccFileWriteString,
QccFileReadLine,
QccFileSkipWhiteSpace
\- reading and writing of files
.SH SYNOPSIS
.B #include "libQccPack.h"
.sp
.BI "int QccFileReadChar(FILE *" infile ", char *" val );
.br
.BI "int QccFileWriteChar(FILE *" outfile ", char " val );
.br
.BI "int QccFileReadInt(FILE *" infile ", int *" val );
.br
.BI "int QccFileWriteInt(FILE *" outfile ", int " val );
.br
.BI "int QccFileReadDouble(FILE *" infile ", double *" val );
.br
.BI "int QccFileWriteDouble(FILE *" outfile ", double " val );
.br
.BI "int QccFileReadString(FILE *" infile ", QccString " s );
.br
.BI "int QccFileWriteString(FILE *" outfile ", const QccString " s );
.br
.BI "int QccFileReadLine(FILE *" infile ", QccString " s );
.br
.BI "int QccFileSkipWhiteSpace(FILE *" infile ", int " skip_comments_flag );
.SH DESCRIPTION
The following routines read and write binary data to files:
.TP
.B QccFileReadChar()
reads a
.B char
into the location pointed to by
.IR val .
.TP
.B QccFileWriteChar()
writes the 
.B char
in
.IR val .
.TP
.B QccFileReadInt()
reads an
.B int
into the location pointed to by
.IR val .
.TP
.B QccFileWriteInt()
writes the 
.B int
in
.IR val .
.TP
.B QccFileReadDouble()
reads a
.B double
into the location pointed to by
.IR val .
.TP
.B QccFileWriteDouble()
writes the 
.B double
in
.IR val .
.LP
In reading and writing
.B int
and 
.B double
values,
the routines
.BR QccBinaryCharToInt (3),
.BR QccBinaryIntToChar (3),
.BR QccBinaryCharToFloat (3),
and
.BR QccBinaryFloatToChar (3)
are used to ensure that the binary values 
are read/written from files in MSB-first order despite the
byte ordering native to the machine.
Thus, files produced by QccPack should be portable across
different architectures.
QccPack stores floating-point numbers in its files using 4 bytes 
(32-bit precision); hence
.B QccFileWriteDouble()
actually casts the
.B double
value to a 
.B float
before writing and can therefore incur some precision loss.
In each of the read routines, storage space pointed to by
.I val
must be allocated in the appropriate amount prior to calling
the routine.
.LP
.B QccFileReadString()
reads a
.B QccString 
into
.IR s ,
which must be allocated prior to calling
.BR QccFileReadString() .
The string is truncated to
.B QCCSTRINGLEN
characters to avoid overrunning
.IR s .
.LP
.BR QccFileWriteString()
writes a
.BR QccString .
.LP
.B QccFileReadLine()
reads an entire line from
.IR infile ,
up to and including the newline character.
The characters of the line, except for
the newline character, are returned in the string
.IR s ,
with the line being truncated to
.B QCCSTRINGLEN
characters to avoid overrunning
.IR s .
.LP
.B QccFileSkipWhiteSpace()
skips over white space and, if 
.I skip\_comments\_flag
is nonzero, comment lines, in the input file.
White space includes space, `\\n' (newline), `\\t' (tab), 
and `\\r' (return) characters.
A comment line is any line that starts with a
`#', `*', or `/'.
When
.B QccFileSkipWhiteSpace()
returns, the file is positioned to the next non-white-space character not
on a comment line.
.SH "RETURN VALUE"
Each of these routines return 0 upon successful completion.  If an error
occurs while accessing the file, 1 is returned.
.SH "SEE ALSO"
.BR QccFileOpen (3),
.BR QccBinaryCharToInt (3),
.BR QccBinaryIntToChar (3),
.BR QccBinaryCharToFloat (3),
.BR QccBinaryFloatToChar (3),
.BR QccPack (3)
.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them an.or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
