.TH QCCTRIANGLE 3 "QCCPACK" ""
.SH NAME
QccTrianglePrint,
QccTriangleBoundingBox,
QccTrianglePointInside,
QccTriangleCreateAffineTransform
\- miscellaneous 2D triangle routines
.SH SYNOPSIS
.B #include "libQccPack.h"
.sp
.BI "void QccTrianglePrint(const QccTriangle *" triangle );
.br
.sp
.BI "int QccTriangleBoundingBox(const QccTriangle *" triangle ", QccPoint *" box_max ", QccPoint *" box_min );
.br
.sp
.BI "int QccTrianglePointInside(const QccTriangle *" triangle ", const QccPoint *" point );
.br
.sp
.BI "int QccTriangleCreateAffineTransform(const QccTriangle *" triangle1 ", const QccTriangle *" triangle2 ", QccMatrix " transform );
.SH DESCRIPTION
QccPack provides the
.B QccTriangle
data structure to represent a triangle in the 2D plane.
.SH "DATA STRUCTURE"
.B QccTriangle
data structure consists of three points and is defined as:
.RS
.nf

typedef struct
{
  QccPoint vertices[3];
} QccTriangle;
.fi
.RE
.LP
The fields of
.B QccTriangle
are as follows:
.TP
.I vertices
An array of the three vertices of the triangle.
.SH "ROUTINES"
.BR QccTrianglePrint()
prints the three vertices of
.I triangle
to
.BR stdout .
.LP
.BR QccTriangleBoundingBox()
determines the bounding box of
.IR triangle .
The bounding box is defined as the smallest rectangle that encloses
all three vertices of
.IR triangle .
.BR QccTriangleBoundingBox()
returns the bounding box by specifying the
points of the upper-left
.RI ( box_max )
and lower-right
.RI ( box_min )
corners of the bounding box.
.LP
.BR QccTrianglePointInside()
returns 1 if
.IR point
lies within the interior of
.IR triangle
(i.e.,
.I triangle
encloses
.IR point ),
and 0 if
.IR point
is outside of
.IR triangle .
.LP
.BR QccTriangleCreateAffineTransform()
determines an affine transform,
.IR affine_transform ,
that maps points in
.I triangle1
into
.IR triangle2 .
.IR affine_transform
should be a 3 x 3 matrix
allocated prior to calling
.BR QccTriangleCreateAffineTransform()
.SH "SEE ALSO"
.BR QccPoint (3),
.BR QccPack (3)

Y. Altunbasak, A. M. Tekalp, and G. Bozdagi,
"Two-Dimensional Object-based Coding Using a Content-based Mesh
and Affine Motion Parameterization," in
.IR "Proceedings of the International Conference on Image Processing" ,
Washington, DC, October 1995, pp. 394 397.
.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them an.or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
