.TH QCCPACK 3 "QCCPACK" ""
.SH NAME
QccPack \- Quantization, compression, and coding libraries and utility 
programs
.SH DESCRIPTION
.B QccPack
provides a collection of library routines and utility programs for
quantization, compression, and coding of data.  
.B QccPack 
has been written
to provide very flexible and general implementations of procedures commonly
used in coding and compression applications.
.LP
The essential component of the 
.B QccPack 
collection is a library 
of procedures implementing a large variety of compression and
coding algorithms.  Application programs may make use of the 
.B QccPack
library routines by linking the application against the library during 
compilation.  Each library function is very general in its implementation 
so to be useful in a large variety of applications.  
.LP
Additionally, much of the functionality of the library routines has been 
provided in the form of stand-alone executable programs.  The prime importance 
these utility programs is probably that they provide examples of how to
interface with many of the 
.B QccPack 
library routines.  The utility programs
could also be called from scripts to simulate the operation of complex
coding and compression systems before implementing all the system 
functionality into one stand-alone program.  
.LP
.B QccPack 
is intended for use in the development of prototypes of coding
and compression systems, and in academic research.  Its main reason for
existence is to obviate the incessant re-implementation of common algorithms
for the sake of application-specific details.  For example, we don't want
to re-implement arithmetic coding every time we change the symbol-alphabet
size or the number of contexts in the arithmetic-coder adaptive model.  By 
using 
.BR QccPack, 
we use the same implementation of arithmetic coding regardless
of our application.  The drawback of this library-based approach to
development is the fact that the generality required of the library routines
leads to a frequent use of dynamic memory allocation which, in turn, implies 
that the routines execute slower than would a similar implementation that 
hard-coded application-specific details.  For this reason, 
.B QccPack 
is intended
for prototyping and proof-of-concept needs rather than for direct use in 
applications requiring high-speed operation.
.SH "MULTITHREAD SUPPORT"
QccPack optionally supports use in multithreaded applications.
Currently, QccPack does not make use of threads internally; however,
if multithread support is enabled when compiling the library, an
application program can invoke QccPack functions within multiple
threads simultaneously. In order to use QccPack in a
multithreaded application, QccPack must have been compiled with thread
support enabled and linked against the pthreads library (see
the QccPack README file and
.BR pthread_create (3).)
This action renders the QccPack library MT-safe, although see
.BR QccMathRand (3)
for one caveat.
.SH "QCCPACK MODULES"
.SS "Standard Modules"
The 
.B QccPack
library routines and utility programs are partitioned into several
modules based on their functionalities.  The standard modules, which
are available for all installations of QccPack are as follows:
.TP
.B General 
See below
.TP
.B "Entropy Coding" 
See
.BR QccPackENT (3)
.TP
.B "Scalar Quantization" 
See
.BR QccPackSQ (3)
.TP
.B "Vector Quantization" 
See
.BR QccPackVQ (3)
.TP
.B "Adaptive Vector Quantization" 
See
.BR QccPackAVQ (3)
.TP
.B "Image Processing and Manipulation" 
See
.BR QccPackIMG (3)
.TP
.B "Wavelets" 
See
.BR QccPackWAV (3)
.TP
.B "Video Coding" 
See
.BR QccPackVID (3)
.TP
.B "Hyspectral Imagery" 
See
.BR QccPackHYP (3)
.SS "Optional Modules"
In addition to the standard modules listed above, there are optional
modules that may or may not have been installed on your system.
These optional modules may have licensing schemes different from
GPL/LGPL used for the standard QccPack modules (hence the reason for
separating them out to optional modules); refer to the documentation
coming with each module for more details.
.TP
.B "SPIHT Encoding & Decoding of Images" 
See
.BR QccPackSPIHT (3),
if installed
.TP
.B "SPECK Encoding & Decoding of Images" 
See
.BR QccPackSPECK (3),
if installed
.SH "QCCPACK GENERAL MODULE"
This module provides general-purpose tools for
quantization, compression, and coding of data.  
.SS "DATA TYPES AND FILE FORMAT"
.TP
.BR QccFilter (3)
generic data structure 
.B QccFilter
for FIR filtering of signals
.TP
.BR QccBitBuffer (3)
generic data structure
.B QccBitBuffer
for bitstream packing/unpacking
.TP
.BR QccFifo (3)
data structure for bitstream fifo
.TP
.BR QccDataset (3)
generic vector data structure
.B QccDataset
and corresponding 
.B DAT
file format.
.TP
.BR QccChannel (3)
generic 
.B QccChannel
structure for channel of channel symbols and corresponding 
.B CHN
file format.
.SS "LIBRARY ROUTINES"
.SS Miscellaneous
.TP
.BR QccInit (3)
QccPack library initialization
.TP
.BR QccExit (3)
normal, non-error program exit
.TP
.BR QccFree (3)
free memory
.TP
.BR QccGetProgramName (3)
gets the current program name
.TP
.BR QccParseParameters (3)
parsing of command-line parameters
.SS String Handling
.TP
.BR QccStringMakeNull (3)
makes a null string
.TP
.BR QccStringNull (3)
check for a null string
.TP
.BR QccConvertToQccString (3)
convert from a character array to QccString
.TP
.BR QccStringCopy (3)
copies a QccString
.TP
.BR QccStringSprintf (3)
formated print to a QccString
.SS Environment Variables
.TP
.BR QccSetEnv (3)
set an environment variable
.TP
.BR QccGetEnv (3)
retrieve the value of an environment variable
.SS Library Version
.TP
.BR QccSetUserHeader (3)
set a user-defined headr message
.TP
.BR QccGetQccPackVersion (3)
retrieve the version and date of the QccPack library
.TP
.BR QccCompareQccPackVersions (3)
compare two sets of QccPack versions
.TP
.BR QccPrintQccPackVersion (3)
print the version and date of the QccPack library
.SS Time
.TP
.BR QccTimeTic (3)
start timer
.TP
.BR QccTimeToc (3)
determine elapsed time
.SS Error Handling
.TP
.BR QccErrorAddMessage (3)
add a message to the error-message list
.TP
.BR QccErrorPrintMessages (3)
print all error messages to stderr
.TP
.BR QccErrorClearMessages (3)
clear all messages from message queue
.TP
.BR QccErrorExit (3)
print all error messages to stderr and cause program exit with error
.TP
.BR QccErrorWarning (3)
print warning message immediately to stderr
.SS Binary Values
.TP
.BR QccBinaryCharToInt (3)
convert QccPack's MSB-first value to int
.TP
.BR QccBinaryIntToChar (3)
convert int to QccPack's MSB-first value 
.TP
.BR QccBinaryCharToFloat (3)
convert QccPack's MSB-first value to float
.TP
.BR QccBinaryFloatToChar (3)
convert float to QccPack's MSB-first value 
.SS "File Access"
.TP
.BR QccFileExists (3)
check for file existence
.TP
.BR QccFileGetExtension (3)
get filename extension
.TP
.BR QccFileOpen (3)
open file
.TP
.BR QccFileDescriptorOpen (3)
open file pointer from file descriptor
.TP
.BR QccFileClose (3)
close file
.TP
.BR QccFileRemove (3)
remove file
.TP
.BR QccFileGetSize (3)
get size of file
.TP
.BR QccFileGetModTime (3)
get last modification time of file
.TP
.BR QccFileGetRealPath (3)
get real path of file
.TP
.BR QccFileGetCurrentPosition (3)
get current position in file stream
.TP
.BR QccFileRewind (3)
rewind file to its beginning
.TP
.BR QccFileReadChar (3)
read char
.TP
.BR QccFileWriteChar (3)
write char
.TP
.BR QccFileReadInt (3)
read int
.TP
.BR QccFileWriteInt (3)
write int
.TP
.BR QccFileReadDouble (3)
read double
.TP
.BR QccFileWriteDouble (3)
write double
.TP
.BR QccFileReadString (3)
read string
.TP
.BR QccFileWriteString (3)
write string
.TP
.BR QccFileReadLine (3)
read an entire line
.TP
.BR QccFileSkipWhiteSpace (3)
skip over white space and comment lines
.TP
.BR QccFileReadMagicNumber (3)
read magic number and version information from file header
.TP
.BR QccFileWriteMagicNumber (3)
write magic number and version information to file header
.TP
.BR QccFileWriteMagicNumberVersion (3)
write magic number and version information to file header with explicitly
specified version
.TP
.BR QccFileGetMagicNumber (3)
retrieve magic number from designated file
.TP
.BR QccFilePrintFileInfo (3)
print magic number and version information to stdout
.SS File-Path Searching
.TP
.BR QccFilePathSearch (3)
searches for a specified filename in a specified path
.TP
.BR QccFilePathSearchOpenRead (3)
searches for and opens for reading a specified filename in a specified path
.SS Miscellaneous Mathematics
.TP
.BR QccMathMax (3)
maximum of two numbers
.TP
.BR QccMathMin (3)
minimum of two numbers
.TP
.BR QccMathPercent (3)
percentage of two numbers
.TP
.BR QccMathModulus (3)
signed remainder after division of two numbers
.TP
.BR QccMathLog2 (3)
logarithm base 2
.TP
.BR QccMathMedian (3)
median of three values
.TP
.BR QccMathRand (3)
uniformly distributed random value
.TP
.BR QccMathGaussianDensity (3)
Gaussian-density function
.TP
.BR QccMathLaplacianDensity (3)
Laplacian-density function
.SS Transparency
.TP
.BR QccAlphaOpaque (3)
evaluate opacity
.TP
.BR QccAlphaTransparent (3)
evaluate transparency
.TP
.BR QccAlphaTranslucent (3)
evaluate translucency
.SS Vector Mathematics
.TP
.BR QccVectorAlloc (3)
allocate vector
.TP
.BR QccVectorFree (3)
free vector
.TP
.BR QccVectorZero (3)
zero vector
.TP
.BR QccVectorResize (3)
resize vector
.TP
.BR QccVectorMean (3)
calculate vector mean
.TP
.BR QccVectorVariance (3)
calculate vector variance
.TP
.BR QccVectorAdd (3)
add two vectors
.TP
.BR QccVectorSubtract (3)
subtract one vector from another
.TP
.BR QccVectorScalarMult (3)
multiply vector by scalar
.TP
.BR QccVectorCopy (3)
vector copy
.TP
.BR QccVectorNorm (3)
calculate vector norm
.TP
.BR QccVectorNormalize (3)
normalize vector to unit length
.TP
.BR QccVectorDotProduct (3)
calculate dot product of two vectors
.TP
.BR QccVectorAngle (3)
calculate angle between two vectors
.TP
.BR QccVectorSquareDistance (3)
calculate squared Euclidean distance between two vectors
.TP
.BR QccVectorSumComponents (3)
sum vector components 
.TP
.BR QccVectorMaxValue (3)
find maximum component of a vector
.TP
.BR QccVectorMinValue (3)
find minimum component of a vector
.TP
.BR QccVectorPrint (3)
print vector to stdout
.TP
.BR QccVectorSortComponents (3)
quicksort of vector components
.TP
.BR QccVectorGetSymbolProbs (3)
calculate probabilities of a list of symbols
.TP
.BR QccVectorMoveComponentToFront (3)
move specified component to front of vector
.TP
.BR QccVectorSubsample (3)
downsample a vector by a factor of 2
.TP
.BR QccVectorUpsample (3)
upsample a vector by a factor of 2
.TP
.BR QccVectorDCT (3)
one-dimensional discrete cosine transform (DCT) of a signal vector
.TP
.BR QccVectorInverseDCT (3)
one-dimensional inverse discrete cosine transform (IDCT) of a signal vector
.SS Integer-Vector Mathematics
.TP
.BR QccVectorIntAlloc (3)
allocate integer vector
.TP
.BR QccVectorIntFree (3)
free integer vector
.TP
.BR QccVectorIntZero (3)
zero integer vector
.TP
.BR QccVectorIntResize (3)
resize integer vector
.TP
.BR QccVectorIntMean (3)
calculate integer-vector mean
.TP
.BR QccVectorIntVariance (3)
calculate integer-vector variance
.TP
.BR QccVectorIntAdd (3)
add two integer vectors
.TP
.BR QccVectorIntSubtract (3)
subtract one integer vector from another
.TP
.BR QccVectorIntScalarMult (3)
multiply integer vector by scalar
.TP
.BR QccVectorIntCopy (3)
integer-vector copy
.TP
.BR QccVectorIntNorm (3)
calculate integer-vector norm
.TP
.BR QccVectorIntDotProduct (3)
calculate dot product of two integer vectors
.TP
.BR QccVectorIntSquareDistance (3)
calculate squared Euclidean distance between two integer vectors
.TP
.BR QccVectorIntSumComponents (3)
sum integer-vector components 
.TP
.BR QccVectorIntMaxValue (3)
find maximum component of a integer vector
.TP
.BR QccVectorIntMinValue (3)
find minimum component of a integer vector
.TP
.BR QccVectorIntPrint (3)
print integer vector to stdout
.TP
.BR QccVectorIntSortComponents (3)
quicksort of integer-vector components
.TP
.BR QccVectorIntMoveComponentToFront (3)
move specified component to front of integer vector
.TP
.BR QccVectorIntSubsample (3)
downsample a integer vector by a factor of 2
.TP
.BR QccVectorIntUpsample (3)
upsample a integer vector by a factor of 2
.SS "Matrix Mathematics"
.TP
.BR QccMatrixAlloc (3)
allocate matrix
.TP
.BR QccMatrixFree (3)
free matrix
.TP
.BR QccMatrixZero (3)
zero matrix
.TP
.BR QccMatrixResize (3)
resize matrix
.TP
.BR QccMatrixCopy (3)
copy matrix
.TP
.BR QccMatrixMaxValue (3)
find largest element in matrix
.TP
.BR QccMatrixMinValue (3)
find smallest element in matrix
.TP
.BR QccMatrixPrint (3)
print matrix to stdout
.TP
.BR QccMatrixRowExchange (3)
exchange matrix rows
.TP
.BR QccMatrixColExchange (3)
exchange matrix columns
.TP
.BR QccMatrixIdentity (3)
set to identity matrix
.TP
.BR QccMatrixTranspose (3)
transpose matrix
.TP
.BR QccMatrixAdd (3)
adds two matrices
.TP
.BR QccMatrixSubtract (3)
subtracts one matrix from another
.TP
.BR QccMatrixMean (3)
calculate mean of matrix elements
.TP
.BR QccMatrixVariance (3)
calculate variance of matrix elements
.TP
.BR QccMatrixMaxSignalPower (3)
find the largest squared row-vector norm in matrix
.TP
.BR QccMatrixVectorMultiply (3)
multiply matrix on the right by a column vector
.TP
.BR QccMatrixMultiply (3)
multiply two matrices
.TP
.BR QccMatrixDCT (3)
two-dimensional discrete cosine transform (DCT) of a matrix
.TP
.BR QccMatrixInverseDCT (3)
two-dimensional inverse discrete cosine transform (IDCT) of a matrix
.TP
.BR QccMatrixAddNoiseToRegion (3)
corrupt region of matrix with random noise
.TP
.BR QccMatrixInverse (3)
matrix inverse
.TP
.BR QccMatrixSVD (3)
singular value decomposition
.TP
.BR QccMatrixOrthogonalize (3)
generate orthonormal basis for range of matrix
.TP
.BR QccMatrixNullspace (3)
generate orthonormal basis for nullspace of matrix
.SS "Integer-Matrix Mathematics"
.TP
.BR QccMatrixIntAlloc (3)
allocate integer matrix
.TP
.BR QccMatrixIntFree (3)
free integer matrix
.TP
.BR QccMatrixIntZero (3)
zero integer matrix
.TP
.BR QccMatrixIntCopy (3)
copy integer matrix
.TP
.BR QccMatrixIntResize (3)
resize integer matrix
.TP
.BR QccMatrixIntMaxValue (3)
find largest element in integer matrix
.TP
.BR QccMatrixIntMinValue (3)
find smallest element in integer matrix
.TP
.BR QccMatrixIntPrint (3)
print integer matrix to stdout
.TP
.BR QccMatrixIntTranspose (3)
transpose integer matrix
.TP
.BR QccMatrixIntAdd (3)
adds two matrices
.TP
.BR QccMatrixIntSubtract (3)
subtracts one integer matrix from another
.TP
.BR QccMatrixIntMean (3)
calculate mean of integer-matrix elements
.TP
.BR QccMatrixIntVariance (3)
calculate variance of integer-matrix elements
.TP
.BR QccMatrixIntVectorMultiply (3)
multiply integer matrix on the right by a column vector
.TP
.BR QccMatrixIntMultiply (3)
multiply two integer matrices
.SS "Volume Mathematics"
.TP
.BR QccVolumeAlloc (3)
allocate volume
.TP
.BR QccVolumeFree (3)
free volume
.TP
.BR QccVolumeZero (3)
zero volume
.TP
.BR QccVolumeResize (3)
resize volume
.TP
.BR QccVolumeCopy (3)
copy volume
.TP
.BR QccVolumeMaxValue (3)
find largest element in volume
.TP
.BR QccVolumeMinValue (3)
find smallest element in volume
.TP
.BR QccVolumePrint (3)
print volume to stdout
.TP
.BR QccVolumeAdd (3)
adds two volumes
.TP
.BR QccVolumeSubtract (3)
subtracts one volume from another
.TP
.BR QccVolumeMean (3)
calculate mean of volume elements
.TP
.BR QccVolumeVariance (3)
calculate variance of volume elements
.SS "Integer-Volume Mathematics"
.TP
.BR QccVolumeIntAlloc (3)
allocate integer volume
.TP
.BR QccVolumeIntFree (3)
free integer volume
.TP
.BR QccVolumeIntZero (3)
zero integer volume
.TP
.BR QccVolumeIntResize (3)
resize integer volume
.TP
.BR QccVolumeIntCopy (3)
copy integer volume
.TP
.BR QccVolumeIntMaxValue (3)
find largest element in integer volume
.TP
.BR QccVolumeIntMinValue (3)
find smallest element in integer volume
.TP
.BR QccVolumeIntPrint (3)
print integer volume to stdout
.TP
.BR QccVolumeIntAdd (3)
adds two volumes
.TP
.BR QccVolumeIntSubtract (3)
subtracts one integer volume from another
.TP
.BR QccVolumeIntMean (3)
calculate mean of integer-volume elements
.TP
.BR QccVolumeIntMean (3)
calculate variance of integer-volume elements
.SS "Fast Discrete Cosine Transform (DCT)"
.TP
.BR QccFastDCTInitialize (3)
initialize fast DCT
.TP
.BR QccFastDCTCreate (3)
create fast DCT of a certain length
.TP
.BR QccFastDCTFree (3)
free fast DCT
.TP
.BR QccFastDCTForwardTransform1D (3)
forward 1D fast DCT
.TP
.BR QccFastDCTInverseTransform1D (3)
inverse 1D fast DCT
.TP
.BR QccFastDCTForwardTransform2D (3)
forward 2D fast DCT
.TP
.BR QccFastDCTInverseTransform2D (3)
inverse 2D fast DCT
.SS "2D Regular Mesh"
.TP
.BR QccPointPrint (3)
print 2D point
.TP
.BR QccPointCopy (3)
copy 2D point
.TP
.BR QccPointAffineTransform (3)
affine-transform 2D point
.TP
.BR QccTrianglePrint (3)
print 2D triangle
.TP
.BR QccTriangleBoundingBox (3)
find bounding box of 2D triangle
.TP
.BR QccTrianglePointInside (3)
determine if point is inside 2D triangle
.TP
.BR QccTriangleCreateAffineTransform (3)
create affine transform between two triangles
.TP
.BR QccRegularMeshInitialize (3)
initialize 2D regular mesh
.TP
.BR QccRegularMeshAlloc (3)
allocate 2D regular mesh
.TP
.BR QccRegularMeshFree (3)
free 2D regular mesh
.TP
.BR QccRegularMeshGenerate (3)
generate uniformly spaced 2D regular mesh
.TP
.BR QccRegularMeshNumTriangles (3)
calculate number of triangles in 2Dregular mesh
.TP
.BR QccRegularMeshToTriangles (3)
extract triangles from 2D regular mesh
.SS "Signal Filtering"
.TP
.BR QccFilterInitialize (3)
initialize filter
.TP
.BR QccFilterAlloc (3)
allocate filter
.TP
.BR QccFilterFree (3)
free filter
.TP
.BR QccFilterCopy (3)
copy filter
.TP
.BR QccFilterReversal (3)
time-reversal of filter
.TP
.BR QccFilterAlternateSignFlip (3)
alternate sign change of filter
.TP
.BR QccFilterRead (3)
read filter from file
.TP
.BR QccFilterWrite (3)
write filter to file
.TP
.BR QccFilterPrint (3)
print filter
.TP
.BR QccFilterVector (3)
perform FIR filtering of a one-dimensional signal
.TP
.BR QccFilterMultiRateFilterVector (3)
perform FIR filtering of a
one-dimensional signal in conjuction
with sampling rate change of the signal
.TP
.BR QccFilterMatrixSeparable (3)
perform separable FIR filtering of a
two-dimensional signal
.SS "Bidirectional Linked List"
.TP
.BR QccListInitialize (3)
initialize list
.TP
.BR QccListFreeNode (3)
free list node
.TP
.BR QccListFree (3)
free all nodes of list
.TP
.BR QccListCreateNode (3)
create new list node
.TP
.BR QccListCopyNode (3)
copy list node
.TP
.BR QccListCompareNodes (3)
compare two list nodes
.TP
.BR QccListFindNode (3)
find a list node within a list
.TP
.BR QccListLength (3)
calculate length of a list
.TP
.BR QccListAppendNode (3)
append list node to end of list
.TP
.BR QccListInsertNode (3)
insert list node into list
.TP
.BR QccListSortedInsertNode (3)
insert list node into list maintaining sorted order
.TP
.BR QccListRemoveNode (3)
remove list node from list
.TP
.BR QccListDeleteNode (3)
remove list node from list and free node
.TP
.BR QccListMoveNode (3)
move list node to another list
.TP
.BR QccListSort (3)
sort a list
.TP
.BR QccListConcatenate (3)
concatenate two lists
.TP
.BR QccListPrint (3)
print list
.SS "QccBitBuffer Routines"
.TP
.BR QccBitBufferInitialize (3)
initialize bit buffer
.TP
.BR QccBitBufferStart (3)
start read or write to bit buffer
.TP
.BR QccBitBufferEnd (3)
end read or write to bit buffer
.TP
.BR QccBitBufferFlush (3)
flush bit buffer to file at end of write
.TP
.BR QccBitBufferCopy (3)
copies bits from one bit buffer to another
.TP
.BR QccBitBufferPutBit (3)
output bit to buffer
.TP
.BR QccBitBufferGetBit (3)
input bit from buffer
.TP
.BR QccBitBufferPutBits (3)
output bits to buffer
.TP
.BR QccBitBufferGetBits (3)
input bits from buffer
.TP
.BR QccBitBufferPutChar (3)
output char to buffer
.TP
.BR QccBitBufferGetChar (3)
input char from buffer
.TP
.BR QccBitBufferPutInt (3)
output int to buffer
.TP
.BR QccBitBufferGetInt (3)
input int from buffer
.TP
.BR QccBitBufferPutDouble (3)
output double to buffer
.TP
.BR QccBitBufferGetDouble (3)
input double from buffer
.SS "QccFifo Routines"
.TP
.BR QccFifoInitialize (3)
initialize fifo
.TP
.BR QccFifoStart (3)
start fifo
.TP
.BR QccFifoEnd (3)
end fifo
.TP
.BR QccFifoFlush (3)
flush fifo
.TP
.BR QccFifoRestart (3)
restart fifo
.SS "QccDataset Routines"
.TP
.BR QccDatasetInitialize (3)
initialize dataset
.TP
.BR QccDatasetAlloc (3)
allocate dataset
.TP
.BR QccDatasetFree (3)
free dataset
.TP
.BR QccDatasetGetBlockSize (3)
get block size of dataset
.TP
.BR QccDatasetPrint (3)
print dataset
.TP
.BR QccDatasetCopy (3)
copy dataset
.TP
.BR QccDatasetReadWholefile (3)
read entire dataset
.TP
.BR QccDatasetReadHeader (3)
read header of dataset
.TP
.BR QccDatasetStartRead (3)
start read of dataset
.TP
.BR QccDatasetEndRead (3)
end read of dataset
.TP
.BR QccDatasetReadBlock (3)
read a block of data from dataset
.TP
.BR QccDatasetReadSlidingBlock (3)
read a sliding block of data from dataset
.TP
.BR QccDatasetWriteWholefile (3)
write entire dataset
.TP
.BR QccDatasetWriteHeader (3)
write header of dataset
.TP
.BR QccDatasetStartWrite (3)
start write of dataset
.TP
.BR QccDatasetEndWrite (3)
end write of dataset
.TP
.BR QccDatasetWriteBlock (3)
write a block of data to dataset
.TP
.BR QccDatasetSetMaxMinValues (3)
set maximum and minimum vector component values for dataset
.TP
.BR QccDatasetMSE (3)
calculate mean squared error (MSE) between two datasets
.TP
.BR QccDatasetMeanVector (3)
calculate mean of dataset
.TP
.BR QccDatasetCovarianceMatrix (3)
calculate covariance matrix of dataset
.TP
.BR QccDatasetCalcVectorPowers (3)
calculate the power (squared norm) of the vectors of a dataset
.SS "QccChannel Routines"
.TP
.BR QccChannelInitialize (3)
initialize channel
.TP
.BR QccChannelAlloc (3)
allcoated channel
.TP
.BR QccChannelFree (3)
free channel
.TP
.BR QccChannelGetBlockSize (3)
get block size of channel
.TP
.BR QccChannelPrint (3)
print channel
.TP
.BR QccChannelReadWholefile (3)
read entire channel
.TP
.BR QccChannelReadHeader (3)
read header of channel
.TP
.BR QccChannelStartRead (3)
start read of channel
.TP
.BR QccChannelEndRead (3)
end read of channel
.TP
.BR QccChannelReadBlock (3)
read a block of symbols from channel
.TP
.BR QccChannelWriteWholefile (3)
write entire channel
.TP
.BR QccChannelWriteHeader (3)
write header of channel
.TP
.BR QccChannelStartWrite (3)
start write of channel
.TP
.BR QccChannelEndWrite (3)
end write of channel
.TP
.BR QccChannelWriteBlock (3)
write a block of symbols to channel
.TP
.BR QccChannelNormalize (3)
normalize channel
.TP
.BR QccChannelDenormalize (3)
denormalize channel
.TP
.BR QccChannelGetNumNullSymbols (3)
count the null symbols in channel
.TP
.BR QccChannelRemoveNullSymbols (3)
remove null symbols from channel
.TP
.BR QccChannelEntropy (3)
calculate entropy of symbols of channel
.TP
.BR QccChannelAddSymbolToChannel (3)
add a symbol to channel
.SS "UTILITY PROGRAMS"
.TP
.BR arithmetic_sequence (1)
output arithmetic sequence of numbers
.TP
.BR asciitodat (1)
convert file from ASCII to DAT format
.TP
.BR dattoascii (1)
convert file from DAT format to ASCII
.TP
.BR chnentropy (1)
 calculate entropy of channel
.TP
.BR datcat (1)
concatenate DAT-format files
.TP
.BR datcut (1)
cut a section from a DAT-format file
.TP
.BR datdist (1)
calculate the distortion between two DAT files
.TP
.BR geometric_sequence (1)
 output geometric sequence of numbers
.TP
.BR printfile (1)
print file
.TP
.BR spawn (1)
runs a shell script or program in the background
.SH "SEE ALSO"
.BR QccPackENT (3),
.BR QccPackSQ (3),
.BR QccPackVQ (3),
.BR QccPackAVQ (3),
.BR QccPackIMG (3),
.BR QccPackWAV (3),
.BR QccPackVID (3)
.BR QccPackHYP (3)
.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them and/or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
