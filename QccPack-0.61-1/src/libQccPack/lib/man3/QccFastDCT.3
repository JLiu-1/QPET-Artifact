.TH QCCFASTDCT 3 "QCCPACK" ""
.SH NAME
QccFastDCT
\- one-dimensional and two-dimensional discrete cosine transform (DCT)
and inverse tranform using a fast implementation
.SH SYNOPSIS
.B #include "libQccPack.h"
.sp
.BI "int QccFastDCTInitialize(QccFastDCT *" transform );
.br
.BI "int QccFastDCTCreate(QccFastDCT *" transform ", int " length );
.br
.BI "void QccFastDCTFree(QccFastDCT *" transform );
.br
.sp
.BI "int QccFastDCTForwardTransform1D(const QccVector " input_signal ", QccVector " output_signal ", int " length ", const QccFastDCT *" transform );
.br
.BI "int QccFastDCTInverseTransform1D(const QccVector " input_signal ", QccVector " output_signal ", int " length ", const QccFastDCT *" transform );
.br
.sp
.BI "int QccFastDCTForwardTransform2D(const QccMatrix " input_block ", QccMatrix " output_block ", int " num_rows ", int " num_cols ", const QccFastDCT *" transform_horizontal ", const QccFastDCT *" transform_vertical );
.br
.BI "int QccFastDCTInverseTransform2D(const QccMatrix " input_block ", QccMatrix " output_block ", int " num_rows ", int " num_cols ", const QccFastDCT *" transform_horizontal ", const QccFastDCT *" transform_vertical );
.SH DESCRIPTION
These routines implement a type-II DCT transform using a fast FFT-based
implementation.
.LP
The DCT transform, a
.BR QccFastDCT
structure, must be initialized and created before use. Specifically,
.BR QccFastDCTInitialize()
should be called before any use of a
.BR QccFastDCT
structure. Then,
.BR QccFastDCTCreate()
is called to setup the transform for the desired
.IR length .
.LP
.BR QccFastDCTForwardTransform1D()
and
.BR QccFastDCTInverseTransform1D()
implement the forward and inverse transforms for a 1D signal.
The specified signal
.IR length 
must match the length of the specified
.IR transform .
.LP
.BR QccFastDCTForwardTransform2D()
and
.BR QccFastDCTInverseTransform2D()
implement the forward and inverse transforms for a 2D block.
.IR transform_horizontal
is applied horizontally across the columns of the block;
.IR transform_vertical
is applied vertically across the rows of the block.
The size of the block must match the lengths of the
transforms; specifically,
.IR num_rows
must match the length of
.IR transform_vertical ,
and
.IR num_cols
must match the length of
.IR transform_horizontal .
.SH "RETURN VALUE"
These routines return 0 on success, 1 on error.
.SH IMPLEMENTATION
These routines implement the type-II DCT; the implementation is 
based on a fast FFT-based implementation as described by
Jain. However, these routines
rely on the GNU Scientific Library (GSL) for the FFT, so,
if GSL is not available, one should use the slower
routines
.BR QccVectorDCT (3)
and
.BR QccMatrixDCT (3) .
.SH "SEE ALSO"
.BR QccVectorDCT (3),
.BR QccMatrixDCT (3),
.BR QccVector (3),
.BR QccPack (3)

A. K. Jain,
.IR "Fundamentals of Digital Image Processing" .
Englewood Cliffs, NJ: Prentice Hall, 1989.

.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them an.or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
