.TH QCCFILEOPEN 3 "QCCPACK" ""
.SH NAME
QccFileExists,
QccFileOpen,
QccFileDescriptorOpen,
QccFileClose,
QccFileRemove,
QccFileGetSize,
QccFileGetModTime,
QccFileGetRealPath,
QccFileGetCurrentPosition,
QccFileRewind
\- file-access routines
.SH SYNOPSIS
.B #include "libQccPack.h"
.sp
.BI "int QccFileExists(const QccString " filename );
.br
.BI "int QccFileGetExtension(const QccString " filename ", QccString " extension );
.br
.BI "FILE *QccFileOpen(const QccString " filename ", QccString " mode );
.br
.BI "FILE *QccFileDescriptorOpen(int " file_descriptor ", const QccString " mode );
.br
.BI "int QccFileClose(FILE *" fileptr );
.br
.BI "int QccFileSeekable(FILE *" fileptr );
.br
.BI "int QccFileFlush(FILE *" fileptr );
.br
.BI "int QccFileRemove(const QccString " filename );
.br
.BI "int QccFileGetSize(const QccString " filename ", FILE *" fileptr ", long *" filesize );
.br
.BI "int QccFileGetModTime(const QccString " filename ", FILE *" fileptr ", long *" time );
.br
.BI "int QccFileGetRealPath(const QccString " filename ", QccString " path );
.br
.BI "int QccFileGetCurrentPosition(FILE *" infile ", long *" current_position );
.br
.BI "int QccFileRewind(FILE *" infile );
.SH DESCRIPTION
.B QccFileExists()
returns 1 if the file specified by
.I filename
exists, or 0 otherwise.
.LP
.BR QccFileGetExtension()
examines
.I filename
and returns in
.I extension
the filename extension, the substring of
.I filename
appearing after the final '.'.
If
.I filename
has no '.' in it, then
.BR QccFileGetExtension()
returns with a raturn value of 1 and a zero-length string in
.IR extension .
If the substring following the final '.' is "gz" (i.e., it is a
.BR gzip (1)-compressed
file), then the substring between the next-to-last '.' and the last '.'
is returned as
.IR extension .
.LP
.B QccFileOpen()
opens the file
specified by
.I filename
for reading 
.RI ( mode 
= "r") or
writing
.RI ( mode
= "w").
If
.I filename
indicates that the file is compressed, 
.B QccFileOpen()
opens the file for reading or writing compressed data
(see "COMPRESSED-FILE ACCESS" below).
Upon succesful completion,
.B QccFileOpen()
returns a
.B FILE
pointer.  Otherwise,
.B NULL
is returned.
.LP
.BR QccFileDescriptorOpen()
returns a
.B FILE
pointer for the file descriptor
.IR file_descriptor .
Usually, 
.IR file_descriptor
is produced by opening a file via
.BR open (2)
or a pipe via
.BR pipe (2) .
.BR QccFileDescriptorOpen()
calls
.BR fdopen (3).
.LP
.B QccFileClose()
closes a file previously opened by
.BR QccFileOpen() 
or
.BR QccFileDescriptorOpen() .
If
.I fileptr
does not correspond to a file opened by
.BR QccFileOpen() 
or
.BR QccFileDescriptorOpen() ,
.B QccFileClose()
returns 1; otherwise a successful completion is indicated by a return value of
0.
.LP
.B QccFileSeekable()
returns 1 if 
.I fileptr
is a seekable stream (i.e., not a pipe, socket, or FIFO), or 0
otherwise.
.LP
.B QccFileFlush()
flushes the 
.I fileptr
stream. See 
.BR fflush (3).
.LP
.B QccFileRemove()
removes (deletes) the file named by
.IR filename .
If the remove fails for whatever reason (nonexistent file, insufficient
privilege for the remove, etc.) a value of 1 is returned; 0 is returned
on success.
.LP
.B QccFileGetSize()
returns the size of the file in bytes in the location
pointed to by
.IR filesize .
The file can be
specified by either its
.IR filename ,
or by giving a
.B FILE
pointer to it.
The size of a compressed file cannot be determined from a
.B FILE
pointer, so use the
.I filename
method.
.LP
.B QccFileGetModTime()
returns the modtime (time of last modification)
of the file in the location pointed to by
.IR modtime .
The file can be
specified by either its
.IR filename ,
or by giving a
.B FILE
pointer to it.
The modtime of a compressed file cannot be determined from a
.B FILE
pointer, so use the
.I filename
method.
.B QccFileGetModTime()
returns 0 for successful completion, 1 otherwise.
.LP
.B QccFileGetRealPath()
expands all symbolic links, resolves references to '.' and '..',
and removes extra '/' characters in
.I filename
to produce a canonicalized absolute pathname to the file
which is retured in
.IR path .
Internally,
.BR realpath (3)
is used.
.LP
.B QccFileGetCurrentPosition()
returns the current value of the file-position indicator for the stream
pointed to by
.IR infile ;
the current position is returned
in the location pointed to by
.IR current_position .
.B QccFileGetCurrentPosition()
does not work for compressed files.
.B QccFileGetCurrentPosition()
returns 0 for successful completion, 1 otherwise.
.LP
.B QccFileRewind()
moves the file-position indicator for the stream
pointed to by
.IR infile 
to the start of the file.
.B QccFileRewind()
does not work for compressed files.
.B QccFileRewind()
returns 0 for successful completion, 1 otherwise.
.SH "COMPRESSED-FILE ACCESS"
The QccPack file-access routines are able to read and write compressed
files created by
.BR gzip (1).
When opening a file for reading or writing,
.B QccFileOpen()
checks the 
.I filename
for a ".Z" or ".gz" extension.  If the
.I filename
has one of these extensions, it is assumed that the file is compressed.
In this case, 
.B QccFileOpen()
opens a pipe (via
.BR popen (3))
to
.BR gzip (1)
(for writing) or
.BR gunzip (1)
(for reading).
All reading and writing of data to the compressed file
then goes through the pipe.
.LP
For each 
.B FILE
pointer returned by
.BR QccFileOpen() ,
the QccPack library keeps track of whether the pointer corresponds to
an actual file or a pipe; 
.B QccFileClose()
then closes the file appropriately by calling
.BR fclose (3) 
or
.BR pclose (3)
as needed.
.SH "SEE ALSO"
.BR fopen (3),
.BR popen (3),
.BR open (2),
.BR fdopen (3),
.BR pipe (2),
.BR realpath (3),
.BR gzip (1),
.BR gunzip (1),
.BR QccPack (3)
.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them an.or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
