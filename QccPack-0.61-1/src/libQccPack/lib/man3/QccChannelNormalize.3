.TH QCCCHANNELNORMALIZE 3 "QCCPACK" ""
.SH NAME
QccChannelNormalize, QccChannelDenormalize
\- channel normalization
.SH SYNOPSIS
.B #include "libQccPack.h"
.sp
.BI "int QccChannelNormalize(QccChannel *" channel );
.br
.BI "int QccChannelDenormalize(QccChannel *" channel );
.SH DESCRIPTION
The channel symbols written to a
.BR CHN -format
file must be nonnegative, with the exception that
a symbol of value of 
.BR QCCCHANNEL_NULLSYMBOL ,
which is defined as -1,
can denote a null symbol (i.e., the absence of a symbol in the channel).
However, some applications may wish to store both positive and negative
symbols in a
.B QccChannel
structure.
.B QccChannelNormalize()
and
.B QccChannelDenormalize()
allow such
.B QccChannel
channels with positive and negative symbols to be written to and read from
.BR CHN -format
files.
The idea is, before writing the file, add a constant to 
each symbol to make all symbols nonegative.
Likewise, this same constant is subtracted from the symbols when the
file is read to shift the symbols back into their original range.
Note that null channel symbols are no longer allowed in this scheme.
.LP
.B QccChannelNormalize()
provides the shifting of positive and negative symbols into
nonnegative symbols.
Assume that the channel symbols originally have range
.RI - N
to
.IR N ;
consequently,
.IR channel -> alphabet_size
is
.IR 2 * N " + 1."
.B QccChannelNormalize()
adds 
.IR channel -> alphabet_size /2
to each symbol in
.IR channel -> channel_symbols 
so the the range of the new symbols is 0 through
.IR channel -> channel_symbols " - 1."
These new symbols can then be written to a
.BR CHN -format
file with
.BR QccChannelWriteBlock (3)
or
.BR QccChannelWriteWholefile (3).
.LP
.B QccChannelDenormalize()
performs the opposite action:
.IR channel -> alphabet_size "/2"
is subtracted from each symbol in
.IR channel -> channel_symbols 
so that the symbols are shifted back to their original range of
.RI - N 
to
.IR N .
.B QccChannelDenormalize()
would typically be called after
.BR QccChannelReadBlock (3)
or
.BR QccChannelReadWholefile (3).
.LP
Prior to calling these routines,
.IR channel -> channel_length ,
.IR channel -> access_block_size ,
and
.IR channel -> alphabet_size
must contain valid values and
.IR channel -> channel_symbols
must be allocated to the appropriate size.
.SH "RETURN VALUE"
These routines return 0 on successful completion, 1 if an error occurs
while writing the file.
.SH "SEE ALSO"
.BR QccChannel (3),
.BR QccChannelWrite (3),
.BR QccChannelRead (3),
.BR QccPack (3)
.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them an.or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
