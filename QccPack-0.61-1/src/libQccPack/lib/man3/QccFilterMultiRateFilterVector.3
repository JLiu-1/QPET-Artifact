.TH QCCFILTERMULTIRATEFILTERVECTOR 3 "QCCPACK" ""
.SH NAME
QccFilterMultiRateFilterVector \- perform FIR filtering of a
one-dimensional signal in conjuction
with sampling rate change of the signal
.SH SYNOPSIS
.B #include "libQccPack.h"
.sp
.BI "int QccFilterMultiRateFilterVector(const QccVector " input_signal ", int " input_length ", QccVector " output_signal ", int " output_length ", const QccFilter *" filter ", int " input_sampling ", int " output_sampling ", int " boundary_extension );
.SH DESCRIPTION
.B QccFilterMultiRateFilterVector()
implements the one-dimensional FIR filtering of a signal.
In addition, the sampling rate of the signal can optionally be changed before
and/or after the filtering operation.
.I filter
gives the FIR filter,
.I input_signal
is the one-dimensional input signal (of
.B QccVector
data type) to be filtered, and
.I output_signal
is the resulting filtered signal.
The lengths of the input and output signals are given, respectively, by
.I input_length
and
.IR output_length .
.LP
The optional sampling rate changes are specified by
.I input_sampling
and
.IR output_sampling .
.I input_sampling
specifies the sampling-rate change before the filtering is perform,
.I output_sampling
gives the rate change after the filter.
Allowed values for these variables are:
.TP
.B QCCFILTER_SAMESAMPLING
Do not change sampling rate
.TP
.B QCCFILTER_SUBSAMPLEEVEN
Even decimation (discard odd samples)
.TP
.B QCCFILTER_SUBSAMPLEODD
Odd decimation (discard even samples)
.TP
.B QCCFILTER_UPSAMPLEEVEN
Even upsampling
.TP
.B QCCFILTER_UPSAMPLEODD
Odd upsampling
.LP
Upsampling and subsampling are implemented by calling
.BR QccVectorUpsample (3)
and
.BR QccVectorSubsample (3);
see those pages for more details on how the sampling-rate changes are 
effectuated.
.LP
.I output_length
must be appropriately set for the specified 
.I input_length
and sampling-rate changes.
Sufficient storage space for
.I output_signal
must be allocated
(by a call to
.BR QccVectorAlloc (3))
prior to calling
.BR QccFilterMultiRateFilterVector() .
.LP
The FIR filtering operation is implemented by
calling
.BR QccFilterVector (3);
see that page for the possible values of
.IR boundary_extension ,
which specifies 
the method to employ to handle the left and right signal boundaries.
.SH "RETURN VALUE"
.B QccFilterMultiRateFilterVector()
returns 0 on success, 1 on failure.
.SH "SEE ALSO"
.BR QccFilterVector (3),
.BR QccFilter (3),
.BR QccVectorSubsample (3),
.BR QccVectorUpsample (3),
.BR QccVector (3),
.BR QccPack (3)
.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them an.or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
