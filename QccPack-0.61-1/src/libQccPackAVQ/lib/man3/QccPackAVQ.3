.TH QCCPACKAVQ 3 "QCCPACKAVQ" ""
.SH NAME
QccPackAVQ \- QccPack module for adaptive vector quantization
.SH DESCRIPTION
.B QccPackAVQ
provides a collection of library routines and utility programs for
adaptive vector quantization.
.SS "LIBRARY ROUTINES"
- no documentation at this time -
.SS "UTILITY PROGRAMS"
.TP
.BR avqrate (1)
calculates rate for AVQ programs
.TP
.BR gtrencode (1)
encode using generalized threshold replenishment (GTR)
.TP
.BR gtrdecode (1)
generalized-threshold-replenishment (GTR) decoder
.TP
.BR paulencode (1)
encode using Paul's 1982 AVQ algorithm
.TP
.BR pauldecode (1)
decoder for Paul's 1982 AVQ algorithm
.TP
.BR gyencode (1)
encode using Gersho and Yano's AVQ algorithm
.TP
.BR gydecode (1)
decoder for the Gersho-Yano AVQ algorithm
.SS "FILE FORMATS"
In general, each file format starts with an ASCII header followed by
ASCII or binary data.  The ASCII header starts with a magic number, and can be
followed with any amount of white space (blanks, tabs, CRs, LFs) and/or
comments lines (lines starting with "#").  Following this white space,
each format has a varying amount of header information in ASCII.
This ASCII header information is separated by blanks and CRs.
The data follows this ASCII header information.  Note: if the data is
in binary, one (and only one) CR 
.B must
follow the last component of ASCII header information.
If the data is ASCII, components of the data are separated with
blanks and/or CRs.
.TP
.BR SID " - format for adaptive VQ side information"
.br
SIDX.X                                                          
.br
.I "<white space>"                                                   
.br
.I "<program name>"
.br
.I "max_codebook_size"
.br
.I N 
.br
.I dim
.br
.I A
.br
.I "<symbol type>" "<symbol>"
.br
\|.
.br
\|.
.br
\|.

where
.I "<program name>"
is the name of the program that wrote the file (which thus dictates the
format of the remaining data),
.I "max_codebook_size"
is the codebook-size limit for online initialization,
.I N
is a length which varies with the use of the file,
.I dim
is the vector dimension of the update vectors, and
.I A
is the number of levels to which update-vector components are
scalar-quantizer to.
.IR N ", " dim ", " precision ", and " 
.I A
are integers stored in ASCII.
The data in a SID file is stored as a sequence of ASCII symbols
.RI ( "<symbol>" ),
and each symbol ia stored with a flag indicating its type
.RI ( "<symbol type>" ).
See
.BR gtrencode "(1), " paulencode "(1), and " gyencode (1)
for more information.
.SH "SEE ALSO"
.BR avqrate (1),
.BR gtrencode (1),
.BR gtrdecode (1),
.BR paulencode (1),
.BR pauldecode (1),
.BR gyencode (1),
.BR gydecode (1),
.BR QccPackENT (3),
.BR QccPackSQ (3),
.BR QccPackVQ (3),
.BR QccPackIMG (3),
.BR QccPackWAV (3),
.BR QccPack (3)
.SH AUTHOR
Copyright (C) 1997-2016  James E. Fowler
.\"  The programs herein are free software; you can redistribute them and/or
.\"  modify them under the terms of the GNU General Public License
.\"  as published by the Free Software Foundation; either version 2
.\"  of the License, or (at your option) any later version.
.\"  
.\"  These programs are distributed in the hope that they will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"  
.\"  You should have received a copy of the GNU General Public License
.\"  along with these programs; if not, write to the Free Software
.\"  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
